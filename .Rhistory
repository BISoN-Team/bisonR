devtools::load_all(".")
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
prior_check(priors, "binary")
priors$edge <- "normal(-2, 1)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
# model_comparison(list(fit_edge, fit_null))
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
# model_comparison(list(fit_edge, fit_null))
devtools::load_all(".")
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
# model_comparison(list(fit_edge, fit_null))
# model_comparison(list(fit_edge, fit_null))
summary(fit_null)
# model_comparison(list(fit_edge, fit_null))
fit_null$chain
# model_comparison(list(fit_edge, fit_null))
fit_null$log_lik
model_comparison(list(fit_edge, fit_null))
model_comparison(list(fit_edge, fit_null))
priors$edge <- "normal(0, 1)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=2)
plot_predictions(fit_edge, num_draws=20, type="density")
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null))
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null), simplify=FALSE)
devtools::load_all(".")
model_comparison(list(fit_edge, fit_null))
loo::loo_model_weights(list(fit_edge$log_lik, fit_null$log_lik))
priors$edge <- "normal(-1, 1)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=2)
plot_predictions(fit_edge, num_draws=20, type="density")
summary(fit_edge)
plot_network(fit_edge, lwd=1)
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null))
loo::loo_model_weights(list(fit_edge$log_lik, fit_null$log_lik))
summary(fit_null)
devtools::load_all(".")
summary(fit_null)
devtools::load_all(".")
summary(fit_null)
devtools::load_all(".")
summary(fit_null)
devtools::load_all(".")
summary(fit_null)
loo::loo_model_weights(list(fit_edge$log_lik, fit_null$log_lik))
model_comparison(list(fit_edge, fit_null))
loo::loo_model_weights(list(fit_edge$log_lik, fit_null$log_lik))
devtools::load_all(".")
model_comparison(list(fit_edge, fit_null))
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null))
names(list(fit_edge, fit_null))
list(fit_edge, fit_null)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
priors$edge <- "normal(-1, 1)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
priors <- get_default_priors("dyadic_regression")
# priors$error <- "half-normal(2.5)"
priors
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null))
plot_predictions(fit_edge, num_draws=20, type="density")
priors$edge <- "normal(0, 2.5)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=2)
plot_predictions(fit_edge, num_draws=20, type="density")
summary(fit_edge)
plot_network(fit_edge, lwd=1)
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null))
?loo::loo
devtools::load_all(".")
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null))
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(fit_edge, fit_null))
devtools::load_all(".")
model_comparison(list(fit_edge, fit_null))
devtools::load_all(".")
model_comparison(list(fit_edge, fit_null))
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(alternative=fit_edge, null=fit_null))
class(model_comparison(list(fit_edge, fit_null)))
names(model_comparison(list(fit_edge, fit_null)))
names(model_comparison(list(fit_edge, fit_null)))
devtools::load_all(".")
model_comparison(list(fit_edge, fit_null))
names(model_comparison(list(fit_edge, fit_null)))
list(a, b)
model_comparison(list(alternative=fit_edge, null=fit_null))
list(fit_null, fit_edge)
names(list(fit_null, fit_edge))
x= 1
y = 1
list(x, y)
c(x, y)
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary"
)
model_comparison(list(non_random_model = fit_edge, random_model=fit_null))
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary",
priors=priors
)
model_comparison(list(non_random_model = fit_edge, random_model=fit_null))
devtools::install()
devtools::build_site()
devtools::document()
detach("package:bisonR", unload = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::build_site()
.Last.error.trace
devtools::load_all(".")
pkgdown::build_article("getting_started")
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
priors <- get_default_priors("dyadic_regression")
priors
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
plot_trace(fit_dyadic, par_ids=1)
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
summary(fit_dyadic)
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
par("mar")
devtools::load_all(".")
prior_check(priors, "binary")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
par("mar")
devtools::load_all(".")
prior_check(priors, "binary")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
prior_check(priors, "binary")
prior_check(priors, "binary")
prior_check(priors, "binary")
prior_check(priors, "binary")
prior_check(priors, "binary")
prior_check(priors, "binary")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
prior_check(priors, "binary")
devtools::load_all(".")
prior_check(priors, "binary")
prior_check(priors, "binary")
pkgdown::build_article("getting_started")
df_1 <- df %>%
select(node_id=node_1_id, age=age_1)
df_1 <- df %>%
select(node_id=node_1_id, age=age_1)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
prior_check(priors, "binary")
priors$edge <- "normal(0, 2.5)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=2)
plot_predictions(fit_edge, num_draws=20, type="density")
summary(fit_edge)
plot_network(fit_edge, lwd=1)
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary",
priors=priors
)
model_comparison(list(non_random_model = fit_edge, random_model=fit_null))
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
priors <- get_default_priors("dyadic_regression")
priors
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
plot_trace(fit_dyadic, par_ids=1)
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
summary(fit_dyadic)
df_1 <- df %>%
select(node_id=node_1_id, age=age_1)
df_2 <- df %>%
select(node_id=node_2_id, age=age_2)
df_nodal <- bind_rows(df_1, df_2) %>%
distinct(node_id, age) %>%
mutate(age_std=scale(age))
df_nodal
priors <- get_default_priors("nodal_regression")
priors$fixed <- "normal(0, 1)"
priors
prior_check(priors, model_type="nodal_regression")
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
fit_nodal <- nodal_regression(
strength(node_id) ~ age_std,
fit_edge,
df_nodal,
priors=priors
)
plot_trace(fit_nodal, par_ids=1)
plot_predictions(fit_nodal, num_draws=20, type="marginal")
summary(fit_nodal)
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")[1]
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
pkgdown::build_article("getting_started")
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
social_differentiation_samples
?plot.communities
?plot
social_differentiation_samples$metric_name
devtools::load_all(".")
devtools::document()
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
0.4 * 4
logspline::logspline(social_differentiation_samples$samples)
fit_logspline <- logspline::logspline(social_differentiation_samples$samples)
logspline::dlogspline(0.45, fit_logspline)
logspline::dlogspline(0.65, fit_logspline)
curve(logspline::dlogspline(x, fit_logspline))
curve(logspline::dlogspline(x, fit_logspline))
logspline::qlogspline(0.01, fit_logspline)
logspline::qlogspline(0.99, fit_logspline)
fit_logspline <- logspline::logspline(social_differentiation_samples$samples)
devtools::load_all(".")
plot(social_differentiation_samples)
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
plot(social_differentiation_samples)
lines(density(social_differentiation_samples$samples))
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)

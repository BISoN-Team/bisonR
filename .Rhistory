dim(component_id_probabilities)
apply(component_id_probabilities[, , 1], 1, which.max)
apply(component_id_probabilities[, , 1], 1, function(x) mean(x == 3))
apply(component_id_probabilities[, , 1], 2, function(x) mean(x == 3))
apply(component_id_probabilities[, , 1], 2, function(x) mean(x == 1))
apply(component_id_probabilities[, , 1], 2, function(x) mean(x == 2))
apply(component_id_probabilities[, , 1], 2, function(x) mean(x == 3))
dim(component_id_probabilities)
component_id_probabilities
dim(component_id_probabilities)
component_id_probabilities[, , 1]
apply(component_id_probabilities[, , 1], 2, function(x) mean(x == 1))
# Each column can give P(i in C_k | K = k)
for (id in 1:1){
prob_k <- apply(component_probabilities, 2, mean)
prob_k_id <- rep(0, max_num_components)
for (k in 1:max_num_components) {
for (l in 1:k) {
prob_k_id[k] <- prob_k_id[k] + prob_k[l] * mean(component_id_probabilities[, k, id] == l) # P(i in C_1 | K = 1)
# print(paste(k, l, prob_k[k] * mean(component_id_probabilities[, k, id] == l)))
}
}
print(prob_k_id, 5)
print(sum(prob_k_id))
}
# Each column can give P(i in C_k | K = k)
for (id in 1:10){
prob_k <- apply(component_probabilities, 2, mean)
prob_k_id <- rep(0, max_num_components)
for (k in 1:max_num_components) {
for (l in 1:k) {
prob_k_id[k] <- prob_k_id[k] + prob_k[l] * mean(component_id_probabilities[, k, id] == l) # P(i in C_1 | K = 1)
# print(paste(k, l, prob_k[k] * mean(component_id_probabilities[, k, id] == l)))
}
}
print(prob_k_id, 5)
print(sum(prob_k_id))
}
component_probabilities
num_samples <- dim(fit_edge$edge_samples)[1]
num_samples <- 200
num_edges <- dim(fit_edge$edge_samples)[2]
max_num_components <- 5
pb <- txtProgressBar(max=num_samples, style=3)
component_probabilities <- matrix(0, num_samples, max_num_components)
component_id_probabilities <- array(0, c(num_samples, max_num_components, num_edges))
for (i in 1:num_samples) {
setTxtProgressBar(pb, i)
fit_mixtures <- list()
for (k in 1:max_num_components) {
fit_mixtures[[k]] <- Mclust(fit_edge$edge_samples[i, ], G=k, verbose=FALSE)
}
bics <- sapply(fit_mixtures, function(x) x$BIC[1])
bics_diff <- max(bics) - bics
half_exp_diffs <- exp(-0.5 * bics_diff)
component_probabilities[i, ] <- half_exp_diffs/sum(half_exp_diffs)
component_id_probabilities[i, , ] <- t(sapply(fit_mixtures, function(x) x$classification))
}
close(pb)
component_probabilities_mean <- apply(component_probabilities, 2, mean)
component_probabilities_mean
dim(component_id_probabilities)
num_samples <- dim(fit_edge$edge_samples)[1]
num_samples <- 200
num_edges <- dim(fit_edge$edge_samples)[2]
max_num_components <- 5
pb <- txtProgressBar(max=num_samples, style=3)
component_probabilities <- matrix(0, num_samples, max_num_components)
edge_components <- array(0, c(num_samples, max_num_components, num_edges))
for (i in 1:num_samples) {
setTxtProgressBar(pb, i)
fit_mixtures <- list()
for (k in 1:max_num_components) {
fit_mixtures[[k]] <- Mclust(fit_edge$edge_samples[i, ], G=k, verbose=FALSE)
}
bics <- sapply(fit_mixtures, function(x) x$BIC[1])
bics_diff <- max(bics) - bics
half_exp_diffs <- exp(-0.5 * bics_diff)
component_probabilities[i, ] <- half_exp_diffs/sum(half_exp_diffs)
edge_components[i, , ] <- t(sapply(fit_mixtures, function(x) x$classification))
}
close(pb)
component_probabilities_mean <- apply(component_probabilities, 2, mean)
component_probabilities_mean
dim(edge_components)
edge_components[, 3, ]
apply(edge_components[, 3, ], 2, function(x) mean(x == 3))
apply(edge_components[, 3, ], 1, function(x) mean(x == 3))
apply(edge_components[, 3, ], 2, function(x) mean(x == 3))
apply(edge_components[, 3, ], 2, function(x) mean(x == 1))
apply(edge_components[, 3, ], 2, function(x) mean(x == 2))
apply(edge_components[, 3, ], 2, function(x) mean(x == 3))
cbind(c(
apply(edge_components[, 3, ], 2, function(x) mean(x == 1)),
apply(edge_components[, 3, ], 2, function(x) mean(x == 2)),
apply(edge_components[, 3, ], 2, function(x) mean(x == 3))
))
cbind(
apply(edge_components[, 3, ], 2, function(x) mean(x == 1)),
apply(edge_components[, 3, ], 2, function(x) mean(x == 2)),
apply(edge_components[, 3, ], 2, function(x) mean(x == 3))
)
cbind(sapply(1:3, function(i) {apply(edge_components[, 3, ], 2, function(x) mean(x == i))})
cbind(sapply(1:3, function(i) {apply(edge_components[, 3, ], 2, function(x) mean(x == i))})
cbind(sapply(1:3, function(i) {apply(edge_components[, 3, ], 2, function(x) mean(x == i))}))
num_samples <- dim(fit_edge$edge_samples)[1]
num_samples <- 200
num_edges <- dim(fit_edge$edge_samples)[2]
max_num_components <- 5
pb <- txtProgressBar(max=num_samples, style=3)
component_probability_samples <- matrix(0, num_samples, max_num_components)
edge_component_samples <- array(0, c(num_samples, max_num_components, num_edges))
for (i in 1:num_samples) {
setTxtProgressBar(pb, i)
fit_mixtures <- list()
for (k in 1:max_num_components) {
fit_mixtures[[k]] <- Mclust(fit_edge$edge_samples[i, ], G=k, verbose=FALSE)
}
bics <- sapply(fit_mixtures, function(x) x$BIC[1])
bics_diff <- max(bics) - bics
half_exp_diffs <- exp(-0.5 * bics_diff)
component_probability_samples[i, ] <- half_exp_diffs/sum(half_exp_diffs)
edge_component_samples[i, , ] <- t(sapply(fit_mixtures, function(x) x$classification))
}
close(pb)
component_probabilities_mean <- apply(component_probabilities, 2, mean)
component_probabilities_mean
get_edge_components <- function(k) {
cbind(sapply(1:k, function(i) {apply(edge_components[, k, ], 2, function(x) mean(x == i))}))
}
get_edge_components(3)
component_probabilities_mean <- apply(component_probability_samples, 2, mean)
component_probabilities_mean
get_edge_components <- function(k) {
cbind(sapply(1:k, function(i) {apply(edge_component_samples[, k, ], 2, function(x) mean(x == i))}))
}
get_edge_components(3)
get_edge_components(2)
get_edge_components(1)
get_edge_components(5)
get_edge_components(8)
devtools::load_all(".")
fit_mixture <- dyadic_mixture(fit_edge)
devtools::load_all(".")
fit_mixture <- dyadic_mixture(fit_edge)
devtools::load_all(".")
fit_mixture <- dyadic_mixture(fit_edge)
devtools::load_all(".")
fit_mixture <- dyadic_mixture(fit_edge)
devtools::load_all(".")
fit_mixture <- dyadic_mixture(fit_edge)
summary(fit_edge)
devtools::load_all(".")
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- dyadic_mixture(fit_edge)
fit_mixture <- edge_mixture(fit_edge)
fit_mixture
summary(fit_mixture)
devtools::document()
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
fit_mixture <- edge_mixture(fit_edge, component_range = 2:6)
fit_mixture <- edge_mixture(fit_edge, component_range = 1:6)
summary(fit_mixture)
fit_mixture <- edge_mixture(fit_edge, component_range = 1:3)
summary(fit_mixture)
fit_mixture <- edge_mixture(fit_edge, component_range = 1:1)
summary(fit_mixture)
fit_mixture <- edge_mixture(fit_edge, component_range = 1:2)
summary(fit_mixture)
fit_mixture <- edge_mixture(fit_edge, component_range = 2:5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, component_range = 2:5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, component_range = 2:5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, component_range = 2:5)
test_list <- list()
test_list[2] <- 1
test_list
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, num_components=5)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
matrix(c(1, 2, 3))
matrix(c(1, 2, 3), nrow=1)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
library(bisonR)
library(dplyr)
devtools::load_all(".")
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
fit_mixture$edge_component_probabilities
fit_mixture$edge_component_probabilities
fit_mixture$edge_component_probabilities[[5]]
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
fit_mixture$edge_component_probabilities[[2]]
df[88, ]
devtools::load_all(".")
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
library(mclust)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::install()
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
devtools::install()
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
cmdstanr::install_cmdstan()
cmdstanr::install_cmdstan(overwrite=TRUE)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::install()
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::install()
library(bisonR)
library(dplyr)
library(bisonR)
library(dplyr)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::build()
devtools::install()
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::install()
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
devtools::document()
draw_network_metric_samples(fit_edge, "weighted_density")
draw_network_metric_samples(fit_edge, "weighted_density")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation", standardise=FALSE)
draw_network_metric_samples(fit_edge, "weighted_density", standardise=FALSE)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density")
draw_network_metric_samples(fit_edge, "weighted_density", standardise = TRUE)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density", standardise = TRUE)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density", standardise = TRUE)
draw_network_metric_samples(fit_edge, "weighted_density", standardise = FALSE)
weighted_density_samples <- draw_network_metric_samples(fit_edge, "weighted_density")
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
weighted_density_samples <- draw_network_metric_samples(fit_edge, "weighted_density")
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
plot(density(weighted_density_samples))
plot(density(social_differentiation_samples))
devtools::test()
class(matrix(0, 2, 2))
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
priors$edge <- "normal(0, 2.5)"
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=1)
plot_predictions(fit_edge, num_draws=20)
summary(fit_edge)
plot_network(fit_edge, lwd=1)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")[1]
draw_network_metric_samples(fit_edge, "social_differentiation")[10]
draw_network_metric_samples(fit_edge, "social_differentiation")[10]
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")[9]
devtools::load_all(".")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::document()
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
class(draw_network_metric_samples(fit_edge, "social_differentiation"))
class(draw_network_metric_samples(fit_edge, "social_differentiation"))
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::document()
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::install()
library(bisonR)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
priors$edge <- "normal(0, 2.5)"
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=1)
plot_predictions(fit_edge, num_draws=20)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
draw_network_metric_samples(fit_edge, "social_differentiation")
detach("package:bisonR", unload = TRUE)
devtools::install()
library(bisonR)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
detach("package:bisonR", unload = TRUE)
devtools::install()
library(bisonR)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
detach("package:bisonR", unload = TRUE)
library(bisonR)
print.edge_model
library(bisonR)
print.edge_model
devtools::load_all(".")
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
library(bisonR)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
summary(fit_edge)
print(fit_edge)
summary(fit_edge)
draw_network_metric_samples(fit_edge, "social_differentiation")
library(bisonR)
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")

} else if (!is.na(str_match(term, "^\\(1\\|.*\\)$"))) {
# Contains a (1 | *) structure, so it's a basic random effect
term_name <- str_split(term, "\\(|\\||\\)")[[1]][3]
model_spec$random[length(model_spec$random) + 1] <- term_name
}
}
model_spec
devtools::load_all(".")
formula <- (event | 1) ~ 1 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ 1 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ 0 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ 0 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
devtools::load_all(".")
formula <- (event | 1) ~ 0 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ 1 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ 0 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
devtools::load_all(".")
formula <- (event | 1) ~ 0 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ 1 + dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(node_1, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + (0 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + (1 | location)
get_edge_model_spec(formula)
devtools::load_all(".")
formula <- (event | 1) ~ dyad(sender, node_2) + age + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + (0 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | location) + (1 | group)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | location) + (1 | group)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | group) + (1 | group)
get_edge_model_spec(formula)
devtools::load_all(".")
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | group) + (1 | group)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | group) + (1 | location)
get_edge_model_spec(formula)
format((event | 1) ~ dyad(sender, node_2) + age + sex + (1 | group) + (1 | location))
paste0(format((event | 1) ~ dyad(sender, node_2) + age + sex + (1 | group) + (1 | location)))
paste0(format((event | 1) ~ dyad(sender, node_2) + age + sex + (1 | group) + (1 | location)), sep="")
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex +
(1 | group) + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex +
(1 | group) + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age +
sex + (1 | group) + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + (1 | group) + age +
sex + (1 | location)
get_edge_model_spec(formula)
devtools::load_all(".")
formula <- (event | 1) ~ dyad(sender, node_2) + (1 | group) + age +
sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + (1 | group) + age + sex + (1 | location)
format(formula)
deparse1(formula)
devtools::load_all(".")
devtools::load_all(".")
formula <- (event | 1) ~ dyad(sender, node_2) + (1 | group) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + (1 | group) + age + sex + (1 | location)
get_edge_model_spec(formula)
formula <- (event | 1) ~ dyad(sender, node_2) + age + sex + (1 | location) + (1 | group)
get_edge_model_spec(formula)
formula <- (event | duration) ~ dyad(sender, node_2) + age + sex + (1 | location) + (1 | group)
get_edge_model_spec(formula)
formula <- (event | duration) ~ age + sex + (1 | location) + (1 | group)
get_edge_model_spec(formula)
!is.null(model_spec$node_1_name)
formula <- (event | duration) ~ age + sex + (1 | location) + (1 | group)
model_spec = get_edge_model_spec(formula)
!is.null(model_spec$node_1_name)
formula <- (event | duration) ~ age + sex + (1 | location) + (1 | group)
model_spec <- get_edge_model_spec(formula)
!is.null(model_spec$node_1_name)
formula <- (event | duration) ~ dyad(node_1, node_2) + age + sex + (1 | location) + (1 | group)
model_spec <- get_edge_model_spec(formula)
!is.null(model_spec$node_1_name)
devtools::load_all(".")
library(bisonR)
data("binary_ex1")
df <- binary_ex1
head(df)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
devtools::load_all(".")
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
devtools::load_all(".")
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
devtools::load_all(".")
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
plot_trace(fit_edge)
summary(fit_edge)
fit_edge <- edge_model((event | 1) ~ 1 + dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
plot_trace(fit_edge)
summary(fit_edge)
fit_edge$chain
fit_edge$model_data$X
colnames(fit_edge$model_data$X)
colnames(fit_edge$model_data$X)[1]
dim(fit_edge$chain)
devtools::load_all(".")
summary(fit_edge)
fit_edge <- edge_model((event | 1) ~ 1 + dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
devtools::load_all(".")
fit_edge <- edge_model((event | 1) ~ 1 + dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
plot_trace(fit_edge)
summary(fit_edge)
devtools::load_all(".")
summary(fit_edge)
devtools::load_all(".")
summary(fit_edge)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
plot_trace(fit_edge)
summary(fit_edge)
plot_network(fit_edge, lwd=2)
plot_predictions(fit_edge, num_draws=20)
tempdir()
devtools::load_all(".")
cmdstanr::write_stan_file(stan_model_binary_code)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath)
model$sample (
data = fit_edge$model_data,
chains = 4,
parallel_chains = 4
)
fit_edge$model_data
model$sample (
data = fit_edge$model_data,
chains = 4,
parallel_chains = 4
)
stan_model_binary_code
model <- cmdstanr::cmdstan_model(model_filepath)
model$sample (
data = fit_edge$model_data,
chains = 4,
parallel_chains = 4
)
summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath)
model_data <- fit_edge$model_data
model_data$node_names <- as.integer(model_data$node_names)
model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
as.integer(model_data$node_names)
model_data$node_names
model_data <- fit_edge$model_data
model_data
model_data$node_names
# summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath)
model_data <- fit_edge$model_data
model_data$node_names <- NULL
model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
# summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath)
model_data <- fit_edge$model_data
model_data$node_names <- NULL
fit <- model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
# summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath, compile=TRUE)
model_data <- fit_edge$model_data
model_data$node_names <- NULL
fit <- model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
# summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath, force_recompile=TRUE)
model_data <- fit_edge$model_data
model_data$node_names <- NULL
fit <- model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
# summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath, force_recompile=TRUE)
model_data <- fit_edge$model_data
model_data$node_names <- NULL
fit <- model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
# summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath)
model_data <- fit_edge$model_data
model_data$node_names <- NULL
fit <- model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
# summary(fit_edge)
model_filepath <- cmdstanr::write_stan_file(stan_model_binary_code)
model <- cmdstanr::cmdstan_model(model_filepath)
model_data <- fit_edge$model_data
model_data$node_names <- NULL
fit <- model$sample (
data = model_data,
chains = 4,
parallel_chains = 4
)
plot_network(fit_edge, lwd=2)
plot_predictions(fit_edge, num_draws=20)
usethis::use_github_actions()
devtools::document()
devtools::document()
devtools::document()
pkgload::load_all()
devtools::document()
devtools::load_all()
devtools::document()
pkgbuild::compile_dll()
devtools::check()
devtools::check()
pkgbuild::compile_dll()
devtools::check()
devtools::document()
library(bisonR)
devtools::load_all()
data("binary_ex1")
df <- binary_ex1
head(df)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
plot_trace(fit_edge)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
plot_trace(fit_edge)
devtools::load_all()
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
install.packages("bayesplot")
bayesplot::mcmc_trace(fit_edge$chain)
bayesplot::mcmc_trace(fit_edge$fit)
fit_edge$fit$loo()
fit_edge$fit$code()
fit_edge$fit$code
fit_edge$fit$code()
bayesplot::mcmc_trace(fit_edge$fit$draws())
bayesplot::mcmc_trace(fit_edge$fit$draws())
fit_edge$fit$draws()
bayesplot::mcmc_trace(fit_edge$fit$draws("beta_fixed"))
plot_trace(fit_edge)
bayesplot::mcmc_trace(fit_edge$fit$draws("beta_fixed[1:10]"))
summary(fit_edge)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
bayesplot::mcmc_trace(fit_edge$fit$draws("beta_fixed"))
dim(fit_edge$fit$draws("beta_fixed"))
bayesplot::mcmc_trace(fit_edge$fit$draws("beta_fixed")[,,1:10])
bayesplot::mcmc_trace(fit_edge$fit$draws("beta_fixed")[,,1:12])
dim(fit_edge$chain)
dim(fit_edge$fit$draws)
dim(fit_edge$fit$draws())
nrow(df)
dim(fit_edge$fit$draws("beta_fixed"))
devtools::load_all(".")
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
plot_trace(fit_edge)
fit_edge$chain
dim(fit_edge$chain)
dim(fit_edge$chain)[2]
devtools::load_all(".")
plot_trace(fit_edge)
summary(fit_edge)
plot_network(fit_edge, lwd=2)
devtools::load_all(".")
devtools::load_all(".")
data("binary_ex1")
df <- binary_ex1
head(df)
df_reg <- df %>%
mutate(dyad_type=as.factor(paste(type_1, type_2, sep="-"))) %>%
distinct(node_1, node_2, dyad_type)
df_reg
df_reg$relatedness <- as.factor(sample(1:3, 28, replace=TRUE))
df_reg
fit_dyad <- dyadic_regression(dyad(node_1, node_2) ~ dyad_type, fit_edge, df_reg, mm=FALSE)
summary(fit_dyad)
fit_dyad$chain
fit_dyad$chain["beta_fixed"]
devtools::load_all(".")
summary(fit_dyad)
devtools::load_all(".")
plot_trace(fit_dyad)
plot_predictions(fit_dyad, num_draws=20)
devtools::load_all(".")
plot_predictions(fit_dyad, num_draws=20)
fit_dyad$draws("edge_pred", format="matrix")
fit_dyad$fit$draws("edge_pred", format="matrix")
fit_edge$chain
fit_edge$chain[, 1;5]
fit_edge$chain[, 1:5]
fit_edge$chain[:, 1:5]
fit_edge$chain[, 1:5]
apply(fit_edge$chain[, 1:5], 2, mean)
fit_dyad$edge_samples
fit_dyad$edge_samples[1, ]
mean(fit_dyad$edge_samples[1, ])
print(fit_dyad$edge_samples[1, ])
aggregate(fit_dyad$edge_samples[1, ] ~ as.factor(fit_dyad$dyad_ids))
as.factor(fit_dyad$dyad_ids)
dim(fit_dyad$edge_samples)
dim(fit_dyad$edge_samples[1, ])
dim(as.vector(fit_dyad$edge_samples[1, ]))
as.vector(fit_dyad$edge_samples[1, ])
devtools::load_all(".")
plot_predictions(fit_dyad, num_draws=20)
plot_predictions(fit_dyad, num_draws=20)
plot_predictions(fit_dyad, num_draws=20)
plot_predictions(fit_dyad, num_draws=20)
devtools::load_all(".")
data("binary_ex1")
df <- binary_ex1
head(df)
df_reg <- data.frame(
node = as.factor(c("Rey", "Leia", "Obi-Wan", "Luke", "C-3PO", "BB-8", "R2-D2", "D-O")),
node_type = as.factor(c("Lifeform", "Lifeform", "Lifeform", "Lifeform", "Droid", "Droid", "Droid", "Droid"))
)
df_reg
fit_node <- nodal_regression(strength(node_names) ~ node_type, fit_edge, df_reg)
devtools::load_all(".")
fit_node <- nodal_regression(strength(node_names) ~ node_type, fit_edge, df_reg)
summary(fit_node)
devtools::load_all(".")
summary(fit_node)
plot_trace(fit_node)
plot_predictions(fit_node, num_draws=20)
devtools::load_all(".")
plot_predictions(fit_node, num_draws=20)
get_contrasts(fit_node, "fixed_node_typeLifeform", "fixed_node_typeDroid")
devtools::load_all(".")
get_contrasts(fit_node, "fixed_node_typeLifeform", "fixed_node_typeDroid")
usethis::use_github_action("test-coverage")
usethis::use_github_action("pkgdown")
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::check()
pkgdown::build_site()
plot_predictions(fit_edge, num_draws=20)
devtools::load_all(".")
plot_predictions(fit_edge, num_draws=20)
devtools::load_all(".")
plot_predictions(fit_edge, num_draws=20)
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
pkgdown::build_articles()
pkgdown::build_articles()
plot_trace(fit_node)
devtools::document()
library(bisonR)
pkgdown::build_articles()
devtools::check()
usethis::use_github_actions_badge("pkgdown")
usethis::use_github_actions_badge("test-coverage")
usethis::use_github_actions_badge()
devtools::test()
devtools::test()
usethis::use_github_actions_badge("test-coverage")
usethis::use_github_actions_badge("test-coverage")
usethis::use_github_actions_badge("pkgdown")
pkgdown::build_site()
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch inst/*' --prune-empty --tag-name-filter cat -- --all
usethis::use_github_actions("pkgdown")
usethis::use_github_actions("pkgdown")
usethis::use_github_actions()
usethis::use_github_actions("pkgdown")
usethis::use_github_actions("test-coverage")
devtools::check()
devtools::check()
usethis::use_github_actions("pkgdown")
usethis::use_github_action_check_standard()
usethis::use_github_action("test-coverage")
usethis::use_github_action("pkgdown")
usethis::use_latest_dependencies()
usethis::use_latest_dependencies()
usethis::use_latest_dependencies()
usethis::use_tidy_dependencies()
install_cmdstan()
usethis::use_latest_dependencies()
usethis::use_latest_dependencies()
usethis::use_latest_dependencies()
install_cmdstan()
usethis::use_latest_dependencies()
?usethis::use_latest_dependencies
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
install.packages(covr)
package.skeleton()
package.skeleton("bisonR")
devtools::document()
devtools::document()
devtools::check()
usethis::use_coverage("codecov")
usethis::use_github_action("test-coverage")
pkgdown::build_article("dyadic_regression")
cmdstanr::install_cmdstan(cores = 4)
devtools::load_all()
data("binary_ex1")
df <- binary_ex1
head(df)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
fit_edge
devtools::load_all()
fit_edge
plot_trace(fit_edge)
summary(fit_edge)
plot_network(fit_edge, lwd=2)
plot_predictions(fit_edge, num_draws=20)
devtools::check()
cmdstanr::install_cmdstan(cores = 4)
data("binary_ex1")
df <- binary_ex1
head(df)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
data("binary_ex1")
df <- binary_ex1
head(df)
library(bisonR)
library(tidyverse)
library(tidyverse)
library(bisonR)
library(dplyr)
data("binary_ex1")
df <- binary_ex1
head(df)
fit_edge <- edge_model((event | 1) ~ dyad(node_1, node_2), data=df, data_type="binary", mc_cores=4, verbose=TRUE)
df_reg <- data.frame(
node = as.factor(c("Rey", "Leia", "Obi-Wan", "Luke", "C-3PO", "BB-8", "R2-D2", "D-O")),
node_type = as.factor(c("Lifeform", "Lifeform", "Lifeform", "Lifeform", "Droid", "Droid", "Droid", "Droid"))
)
df_reg
fit_node <- nodal_regression(strength(node_names) ~ node_type, fit_edge, df_reg)
summary(fit_node)
plot_trace(fit_node)
fit_node
dim(fit_node$chain)
dim(fit_node$chain)[2]
dim(fit_node$chain)[2] < 12
plot_trace.nodal_model(fit_node)
1:dim(fit_node$chain)[2]
devtools::check()
devtools::check()
devtools::document()
?dyadic_regression

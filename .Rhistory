priors$edge <- "normal(-1, 5)"
prior_check(priors, "binary")
priors$edge <- "normal(-2, 5)"
prior_check(priors, "binary")
priors$edge <- "normal(-1, 2.5)"
prior_check(priors, "binary")
priors$edge <- "normal(-1, 1)"
prior_check(priors, "binary")
priors$edge <- "normal(-1, 2.5)"
prior_check(priors, "binary")
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
summary(fit_edge)
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
fit_edge$edge_samples
dim(fit_edge$edge_samples)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
dim(fit_edge$edge_samples)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
df$node_1_id
cbind(df$node_1_id, df$node_2_id)
x <- matrix(0, 10, 10)
x[cbind(df$node_1_id, df$node_2_id)]
x[cbind(df$node_1_id, df$node_2_id)] <- 1
x
cbind(df$node_1_id, df$node_2_id)
unique(cbind(df$node_1_id, df$node_2_id))
unique(rbind(cbind(df$node_1_id, df$node_2_id), cbind(df$node_2_id, df$node_1_id)))
unique(rbind(cbind(df$node_1_id[1:40], df$node_2_id[1:40]), cbind(df$node_2_id, df$node_1_id)))
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=F,
priors=priors
)
curve(dbeta(x, 1 + theta * time, 1 + (1 - theta) * time))
theta <- 0.6
time <- 10
curve(dbeta(x, 1 + theta * time, 1 + (1 - theta) * time))
time <- 1000
curve(dbeta(x, 1 + theta * time, 1 + (1 - theta) * time))
dbeta2 <- function(x, p, rho) dbeta(x, p * (1 - rho)/rho, (1 - rho)/rho + p * (1 + rho)/rho)
curve(dbeta(x, 0.5, 0.9)
curve(dbeta(x, 0.5, 0.9))
curve(dbeta(x, 0.5, 0.9))
curve(dbeta(x, 0.5, 0.5))
curve(dbeta(x, 0.5, 0.1))
curve(dbeta2(x, 0.5, 0.9))
curve(dbeta2(x, 0.5, 0.5))
curve(dbeta2(x, 0.5, 0.1))
curve(dbeta2(x, 0.5, 0.01))
curve(dbeta2(x, 1, 0.01))
curve(dbeta2(x, 10, 0.01))
dbeta2 <- function(x, p, rho) dbeta(x, p * (1 - rho)/rho, (1 - rho)/rho + p * (1 + rho)/rho)
curve(dbeta2(x, 10, 0.01))
curve(dbeta2(x, 100, 0.01))
curve(dbeta2(x, 100, 0.5))
curve(dbeta2(x, 100, 0))
curve(dbeta2(x, 0.5, 0))
curve(dbeta2(x, 0.5, 0.01))
curve(dbeta2(x, 0.5, 0.1))
devtools::test()
devtools::test_active_file()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
prior_check(priors, "binary")
priors$edge <- "normal(-1, 2.5)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=2)
plot_predictions(fit_edge, num_draws=20, type="density")
summary(fit_edge)
plot_network(fit_edge, lwd=1)
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary",
priors=priors
)
model_comparison(list(non_random_model=fit_edge, random_model=fit_null))
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
priors <- get_default_priors("dyadic_regression")
priors
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
plot_trace(fit_dyadic, par_ids=1)
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
summary(fit_dyadic)
df_1 <- df %>%
select(node_id=node_1_id, age=age_1)
df_2 <- df %>%
select(node_id=node_2_id, age=age_2)
df_nodal <- bind_rows(df_1, df_2) %>%
distinct(node_id, age) %>%
mutate(age_std=scale(age))
df_nodal
priors <- get_default_priors("nodal_regression")
priors$fixed <- "normal(0, 1)"
priors
prior_check(priors, model_type="nodal_regression")
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
fit_nodal <- nodal_regression(
strength(node_id) ~ age_std,
fit_edge,
df_nodal,
priors=priors
)
plot_trace(fit_nodal, par_ids=1)
plot_predictions(fit_nodal, num_draws=20, type="marginal")
summary(fit_nodal)
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
social_differentiation_samples
plot(social_differentiation_samples)
plot_predictions(fit_edge, num_draws=20)
plot_predictions(fit_edge, num_draws=20, type="density")
devtools::load_all(".")
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
priors <- get_default_priors("dyadic_regression")
priors
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
plot_trace(fit_dyadic, par_ids=1)
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
summary(fit_dyadic)
df_1 <- df %>%
select(node_id=node_1_id, age=age_1)
df_2 <- df %>%
select(node_id=node_2_id, age=age_2)
df_nodal <- bind_rows(df_1, df_2) %>%
distinct(node_id, age) %>%
mutate(age_std=scale(age))
df_nodal
priors <- get_default_priors("nodal_regression")
priors$fixed <- "normal(0, 1)"
priors
prior_check(priors, model_type="nodal_regression")
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
fit_nodal <- nodal_regression(
strength(node_id) ~ age_std,
fit_edge,
df_nodal,
priors=priors
)
plot_trace(fit_nodal, par_ids=1)
plot_predictions(fit_nodal, num_draws=20, type="marginal")
summary(fit_nodal)
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
social_differentiation_samples
plot(social_differentiation_samples)
devtools::test()
get_edgelist(fit_edge)
expect_output(
summary(fit_edge)
)
summary(fit_edge)
devtools::load_all(".")
devtools::test_active_file()
plot_network(fit_edge, lwd=1)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
fit_edge <- expect_warning(
edge_model (
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=T,
priors=get_default_priors("binary")
),
regexp=NA
)
get_edgelist(fit_edge)
devtools::load_all(".")
devtools::test_active_file()
devtools::test_active_file()
devtools::load_all(".")
fit_edge <- expect_warning(
edge_model (
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=T,
priors=get_default_priors("binary")
),
regexp=NA
)
plot_network(fit_edge, lwd=1)
devtools::load_all(".")
expect_warning(
plot_network(fit_edge, lwd=1),
regexp=NA
)
devtools::load_all(".")
expect_warning(
plot_network(fit_edge, lwd=1),
regexp=NA
)
devtools::load_all(".")
expect_warning(
plot_network(fit_edge, lwd=1),
regexp=NA
)
expect_warning(
plot_network(fit_edge, lwd=1),
regexp=NA
)
devtools::load_all(".")
expect_warning(
plot_network(fit_edge, lwd=1),
regexp=NA
)
expect_warning(
plot_network(fit_edge, lwd=1),
regexp=NA
)
devtools::load_all(".")
plot_network(fit_edge, lwd=10)
devtools::load_all(".")
plot_network(fit_edge)
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
social_differentiation_samples
df_dyadic <- get_edgelist(fit_edge, transform=FALSE)
dyadic_trait <- rnorm(nrow(df_dyadic), df_dyadic$true)
dyadic_trait <- rnorm(nrow(df_dyadic))
df_dyadic <- get_edgelist(fit_edge, transform=FALSE)
dyadic_trait <- rnorm(nrow(df_dyadic))
df_dyadic$group_id <- as.factor(sample(1:4, size=nrow(df_dyadic), replace=TRUE))
df_dyadic$dyadic_trait <- dyadic_trait
fit_dyadic <- dyadic_regression(dyad(node_1, node_2) ~ dyadic_trait, fit_edge, df_dyadic, mm=FALSE)
devtools::load_all(".")
fit_dyadic <- dyadic_regression(dyad(node_1, node_2) ~ dyadic_trait, fit_edge, df_dyadic, mm=FALSE)
fit_edge$chain
fit_edge <- expect_warning(
edge_model (
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=T,
priors=get_default_priors("binary")
),
regexp=NA
)
fit_edge$chain
devtools::load_all(".")
fit_edge <- expect_warning(
edge_model (
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=T,
priors=get_default_priors("binary")
),
regexp=NA
)
fit_edge$chain
devtools::load_all(".")
fit_edge <- expect_warning(
edge_model (
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=T,
priors=get_default_priors("binary")
),
regexp=NA
)
devtools::load_all(".")
fit_edge <- expect_warning(
edge_model (
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=T,
priors=get_default_priors("binary")
),
regexp=NA
)
get_edgelist(fit_edge)
df_dyadic <- get_edgelist(fit_edge, transform=FALSE)
dyadic_trait <- rnorm(nrow(df_dyadic))
df_dyadic$group_id <- as.factor(sample(1:4, size=nrow(df_dyadic), replace=TRUE))
df_dyadic$dyadic_trait <- dyadic_trait
fit_dyadic <- dyadic_regression(dyad(node_1, node_2) ~ dyadic_trait, fit_edge, df_dyadic, mm=FALSE)
devtools::test_active_file()
devtools::test_active_file()
net <- graph_from_edgelist(as.matrix(get_edgelist(fit_edge, transform=FALSE)[, 1:2]), directed=FALSE)
E(net)$weight <- plogis(comparison[, 3])
edgelist <- get_edgelist(fit_edge, transform=FALSE)[, 1:2])
edgelist <- get_edgelist(fit_edge, transform=FALSE)
net <- graph_from_edgelist(as.matrix(edgelist[, 1:2]), directed=FALSE)
E(net)$weight <- plogis(comparison[, 3])
edgelist <- get_edgelist(fit_edge, transform=FALSE)
net <- graph_from_edgelist(as.matrix(edgelist[, 1:2]), directed=FALSE)
E(net)$weight <- plogis(edgelist[, 3])
nodal_metric <- strength(net)
nodal_metric <- nodal_metric - mean(nodal_metric)
df_nodal <- data.frame(node=factor(V(net), levels=1:length(V(net))), metric_true=nodal_metric)
df_nodal$nodal_trait <- rnorm(nrow(df_nodal), 2 * df_nodal$metric)
df_nodal$group_id <- sample(1:2, nrow(df_nodal), replace=TRUE)
df_nodal
expect_warning(
draw_network_metric_samples(fit_edge, "social_differentiation"),
regexp=NA
)
expect_warning(
draw_network_metric_samples(fit_edge, "social_differentiation"),
regexp=NA
)
draw_network_metric_samples(fit_edge, "social_differentiation")
nodal_regression(strength(node) ~ nodal_trait, fit_edge, df_nodal)
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage()
devtools::test_active_file()
devtools::test_active_file()
devtools::load_all(".")
devtools::test_active_file()
devtools::test_active_file()
fit_edge
draw_node_metric_samples(fit_edge, "strength")
draw_node_metric_samples(fit_edge, "eigenvector")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "eigenvector")
draw_node_metric_samples(fit_edge, "betweenness")
!is.na(str_match(hi, "^degree\\[.*\\]$"
)
)
!is.na(str_match(hi, "^degree\\[.*\\]$"))
!is.na(str_match("hi", "^degree\\[.*\\]$"))
!is.na(str_match("degree", "^degree\\[.*\\]$"))
!is.na(str_match("degree[]", "^degree\\[.*\\]$"))
!is.na(str_match("degree[]", "^degree\\[.*\\]$"))
!is.na(str_match("degree[", "^degree\\[.*\\]$"))
!is.na(str_match("degree[0.5]", "^degree\\[.*\\]$"))
!is.na(str_match("degree[0.5]", "^degree\\[.*\\]$"))
str_split("degree[0.5]", "[")
str_split("degree[0.5]", "\[")
str_split("degree[0.5]", "\\[")
str_split("degree[0.5]", "\\[|\\]")
str_split("degree[0.5]", "\\[|\\]")[[1]][2]
as.numeric(str_split("degree[0.5]", "\\[|\\]")[[1]][2])
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "betweenness")
draw_node_metric_samples(fit_edge, "degree[0.5]")
devtools::load_all(".")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0.5]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0.5]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0.5]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0.5]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0.5]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0.5]")
draw_node_metric_samples(fit_edge, "degree[0]")
draw_node_metric_samples(fit_edge, "degree[0]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0]")
draw_node_metric_samples(fit_edge, "degree[0]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0]")
draw_node_metric_samples(fit_edge, "degree[0.5]")
devtools::load_all(".")
draw_node_metric_samples(fit_edge, "degree[0.5]")
fit_edge

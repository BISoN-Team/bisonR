regexp=NA
)
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
coef <- 1
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
expect_warning(
fit_dyad <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ 0 + trait,
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
summary(fit_dyad)
(summary(fit_dyad)$coefficients[2] < (1/coef)) * (summary(fit_dyad)$coefficients[3] > (1/coef))
fit_dyad <- dyadic_regression(
trait ~ 0 + dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
)
summary(fit_dyad)
plot(fit_dyad$model_data$edge_mu, fit_dyad$model_data$response)
lm(fit_dyad$model_data$response ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 3] ~ fit_dyad$model_data$edge_mu)
plot_predictions(fit_dyad, num_draws=20, type="density")
fit_dyad$model_data
plot(density(fit_dyad$model_data$edge_mu))
plot(density(fit_dyad$model_data$trait))
plot(density(fit_dyad$model_data$response))
devtools::load_all(".")
plot_predictions(fit_dyad, num_draws=20, type="density")
rstan:::rstudio_stanc("inst/stan/dyadic_regression.stan")
expect_warning(
fit_dyad <- dyadic_regression(
trait ~ 0 + dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
plot(fit_dyad$model_data$edge_mu, fit_dyad$model_data$response)
lm(fit_dyad$model_data$response ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 3] ~ fit_dyad$model_data$edge_mu)
plot_predictions(fit_dyad, num_draws=20, type="density")
expect_warning(
summary(fit_dyad),
regexp=NA
)
summary(fit_dyad)
plot(fit_dyad$model_data$edge_mu, fit_dyad$model_data$response)
lm(fit_dyad$model_data$response ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 3] ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 3] ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 4] ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 5] ~ fit_dyad$model_data$edge_mu)
expect_warning(
fit_dyad <- dyadic_regression(
trait ~ 1 + dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
plot(fit_dyad$model_data$edge_mu, fit_dyad$model_data$response)
lm(fit_dyad$model_data$response ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 3] ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 4] ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 5] ~ fit_dyad$model_data$edge_mu)
plot_predictions(fit_dyad, num_draws=20, type="density")
expect_warning(
summary(fit_dyad),
regexp=NA
)
summary(fit_dyad)
plot(fit_dyad$model_data$edge_mu, fit_dyad$model_data$response)
lm(fit_dyad$model_data$response ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 3] ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 4] ~ fit_dyad$model_data$edge_mu)
lm(get_edgelist(fit_edge, transform = F)[, 5] ~ fit_dyad$model_data$edge_mu)
summary(lm(get_edgelist(fit_edge, transform = F)[, 5] ~ fit_dyad$model_data$edge_mu))
plot(fit_dyad$model_data$edge_mu, fit_dyad$model_data$response)
plot(fit_dyad$model_data$edge_mu, get_edgelist(fit_edge, transform = F)[, 4])
plot(fit_dyad$model_data$edge_mu, get_edgelist(fit_edge, transform = F)[, 5])
# y = a + bx
Sigma <- matrix(runif(100, 0, 1), 10, 10)
x <- MASS::mvrnorm(100, rep(0, 100), Sigma)
# y = a + bx
Sigma <- matrix(runif(100, 0, 1), 10, 10)
x <- MASS::mvrnorm(10, rep(0, 10), Sigma)
# y = a + bx
Sigma <- matrix(runif(100, 0, 1), 10, 10)
Sigma
diag(10)
Sigma <- matrix(runif(100, 0, 1), 10, 10)
Sigma <- 0.5 * (Sigma + t(Sigma))
Sigma <- Sigma + diag(10) * 10
x <- MASS::mvrnorm(10, rep(0, 10), Sigma)
x
y <- rnorm(100, 0, sd=1)
plot(x, y)
lm(y ~ x)
x <- MASS::mvrnorm(10, rep(0, 10), Sigma)
y <- rnorm(10, 0, sd=1)
plot(x, y)
x
x <- MASS::mvrnorm(1, rep(0, 10), Sigma)
y <- rnorm(10, 0, sd=1)
plot(x, y)
lm(y ~ x)
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
coef <- 1
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
expect_warning(
fit_dyad <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ 0 + trait,
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
summary(fit_dyad)
rstan:::rstudio_stanc("inst/stan/dyadic_regression.stan")
devtools::load_all(".")
fit_dyad <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ 0 + trait,
fit_edge,
df,
mm=FALSE
)
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
)
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
)
plot_predictions(fit_dyad, num_draws=20, type="density")
summary(fit_dyad)
devtools::test_active_file()
devtools::load_all(".")
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
coef <- 1
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
expect_warning(
fit_dyad <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ 0 + trait,
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
expect_warning(
summary(fit_dyad),
regexp=NA
)
expect_equal(
(summary(fit_dyad)$coefficients[2] < (1/coef)) * (summary(fit_dyad)$coefficients[3] > (1/coef)),
1
)
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
)
# Fix this to work with both types of response
plot_predictions(fit_dyad, num_draws=20, type="density")
summary(fit_dyad)
plot_trace(fit_dyad)
fit_dyad$fit$summary()
(summary(fit_dyad)$coefficients[2] < (1/coef)) * (summary(fit_dyad)$coefficients[3] > (1/coef))
fit_dyad$model_data$edge_cov
fit_edge$chain
fit_edge$fit
fit_edge$fit
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
fit_edge$chain
fit_edge$chain[1, ]
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[1, ], 0.1)
df$trait
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
)
summary(fit_dyad)
fit_dyad$summary()
fit_dyad$fit$summary()
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
)
summary(fit_dyad)
fit_dyad$fit$summary()
# df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:100, size=1), ], 0.1)
source("~/Workspace/bisonR/tests/testthat/test-dyadic_regression.R", echo=TRUE)
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
coef <- 1
# df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:100, size=1), ], 0.1)
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
)
summary(fit_dyad)
fit_dyad$fit$summary()
fit_dyad$fit$summary()[4, ]
fit_dyad$fit$summary()[4, 5:6]
fit_dyad$fit$summary()[4, 6:7]
lm(df$trait ~ fit_edge$chain[sample(1:100, size=1), ])
coefficients(lm(df$trait ~ fit_edge$chain[sample(1:100, size=1), ]))[2]
sapply(1:100, function(i) {
coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
})
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:100, size=1), ], 0.1)
plot(density(sapply(1:100, function(i) {
coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[2]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
fit_edge$chain
fit_edge$chain[sample(1:1000, size=1), ]
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
coef
coef <- 1
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait
fit_edge$chain[i, ]
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ 0 + fit_edge$chain[i, ]))[1]
})))
expect_warning(
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
# Fix this to work with both types of response
plot_predictions(fit_dyad, num_draws=20, type="density")
expect_warning(
summary(fit_dyad),
regexp=NA
)
fit_dyad$fit$summary()[4, 6:7]
coef <- 1
# df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
})))
expect_warning(
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
fit_dyad$fit$summary()[4, 6:7]
ests[1] < coef && ests[2] > coef
ests <- fit_dyad$fit$summary()[4, 6:7]
ests[1] < coef && ests[2] > coef
devtools::test_active_file()
devtools::test_active_file()
plot(density(sapply(1:1000, function(i) {
coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
})))
coef <- 1
df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
# df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
# plot(density(sapply(1:1000, function(i) {
#   coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
# })))
expect_warning(
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
# Fix this to work with both types of response
plot_predictions(fit_dyad, num_draws=20, type="density")
expect_warning(
summary(fit_dyad),
regexp=NA
)
ests <- fit_dyad$fit$summary()[4, 6:7]
expect_equal(
ests[1] < coef && ests[2] > coef,
TRUE
)
coef <- 1
# df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
# plot(density(sapply(1:1000, function(i) {
#   coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
# })))
expect_warning(
fit_dyad <- dyadic_regression(
trait ~ dyad(node_1_id, node_2_id),
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
# Fix this to work with both types of response
plot_predictions(fit_dyad, num_draws=20, type="density")
expect_warning(
summary(fit_dyad),
regexp=NA
)
ests <- fit_dyad$fit$summary()[4, 6:7]
expect_equal(
ests[1] < coef && ests[2] > coef,
TRUE
)
ests[1] < coef && ests[2] > coef
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
devtools::load_all(".")
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
coef <- 1
# df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:100, size=1), ], 0.1)
expect_warning(
fit_dyad <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ 0 + trait,
fit_edge,
df,
mm=FALSE
),
regexp=NA
)
expect_warning(
summary(fit_dyad),
regexp=NA
)
coef <- 1
# df$trait <- rnorm(nrow(df), coef * get_edgelist(fit_edge, transform = F)[, 3], 0.1)
df$trait <- rnorm(nrow(df), coef * fit_edge$chain[sample(1:1000, size=1), ], 0.1)
# plot(density(sapply(1:1000, function(i) {
#   coefficients(lm(df$trait ~ fit_edge$chain[i, ]))[2]
# })))

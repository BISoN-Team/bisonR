levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
nets <- expect_warning(
bison_to_igraph(fit_edge, num_draws=10),
regexp=NA
)
devtools::load_all(".")
library(dplyr)
library(igraph)
set.seed(123)
# Load data in with minimal effects
sim_data <- simulate_bison_model("binary", aggregated = TRUE, location_effect = FALSE, age_diff_effect = FALSE)
df <- sim_data$df_sim
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
priors = get_default_priors("binary")
expect_warning(
prior_check(priors, "binary"),
regexp=NA
)
expect_warning(
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
),
regexp=NA
)
# Fit model to the data
fit_edge <- expect_warning(
bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id) + age_diff + (1 | group_id),
data=df,
model_type="binary"
),
regexp=NA
)
expect_warning(plot_network(fit_edge, lwd=10), regexp=NA)
get_default_prior("binary")
devtools::load_all(".")
get_default_prior("binary")
get_default_priors("binary")
devtools::test_active_file()
priors <- expect_warning(bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
),
regexp=NA
)
sim_data <- bisonR::simulate_bison_model("binary", aggregated = TRUE)
df_sim <- sim_data$df_sim
levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
priors <- expect_warning(bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
),
regexp=NA
)
fit_edge
bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
)
devtools::load_all(".")
priors <- expect_warning(bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
),
regexp=NA
)
priors
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df$node_1_id
"A":"F"
f$node_1_id
node_names <- c("A", "B", "C", "D", "E", "F", "G", "H")
df$node_1_id
node_names[df$node_1_id]
node_names <- sample(c("A", "B", "C", "D", "E", "F", "G", "H"))
node_names
node_names <- c("G", "B", "A", "D", "C", "H", "F", "E")
node_names[df$node_1_id]
df$node_1_id
node_names <- c("G", "B", "A", "D", "J", "C", "H", "F", "E", "K")
node_names[df$node_1_id]
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
node_names <- c("G", "B", "A", "D", "J", "C", "H", "F", "E", "K")
df$node_1_name <- node_names[df$node_1_id]
df$node_2_name <- node_names[df$node_2_id]
df
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
x <- expect_warning(
extract_metric(fit_edge, "edge_weight", num_draws=10),
regexp=NA
)
expect_equal(dim(x)[1], 10)
x
draw_edgelist_samples(obj, num_draws)
draw_edgelist_samples(fit_edge, 2)
devtools::load_all(".")
extract_metric(fit_edge, "edge_weight", num_draws=10)
extract_metric(fit_edge, "node_strength", num_draws=50)
fit_edge$node_to_idx
df$node_1_name <- node_names[df$node_1_id]
df$node_2_name <- node_names[df$node_2_id]
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_name, node_2_name),
data=df,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
draw_edgelist_samples(fit_edge, 2)
extract_metric(fit_edge, "edge_weight", num_draws=10)
extract_metric(fit_edge, "node_strength", num_draws=50)
devtools::load_all(".")
extract_metric(fit_edge, "node_strength", num_draws=50)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
node_names <- c("G", "B", "A", "D", "J", "C", "H", "F", "E", "K")
df$node_1_name <- node_names[df$node_1_id]
df$node_2_name <- node_names[df$node_2_id]
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_name, node_2_name),
data=df,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
draw_edgelist_samples(fit_edge, 2)
extract_metric(fit_edge, "edge_weight", num_draws=10)
extract_metric(fit_edge, "node_strength", num_draws=50)
sim_data$df_sim
df
df_2 <- df[,c("node_1_name", "node_2_name")]
df$weight <- df$event/df$duration
df_2 <- df[,c("node_1_name", "node_2_name")]
df_2$weight <- df$event/df$duration
df_2$weight
df_2$weight
?igraph::from_edgelist
net <- igraph::from_edgelist(df[, c("node_1_name", "node_2_name")])
net <- igraph::from_edgelist(df[, c("node_1_name", "node_2_name")])
E(net)$weight <- df$event/df$duration
E(net)
net <- igraph::from_edgelist(df[, c("node_1_name", "node_2_name")])
net
E(net)
net
df[, c("node_1_name", "node_2_name")]
igraph::from_edgelist(df[, c("node_1_name", "node_2_name")])
net <- from_edgelist(df[, c("node_1_name", "node_2_name")])
net
net <- graph_from_edgelist(df[, c("node_1_name", "node_2_name")])
df[, c("node_1_name", "node_2_name")]
raph_from_edgelist(matrix(df[, c("node_1_name", "node_2_name")]))
graph_from_edgelist(matrix(df[, c("node_1_name", "node_2_name")]))
matrix(df[, c("node_1_name", "node_2_name")])
df
df[, c("node_1_name", "node_2_name")]
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]))
net
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net) <- df$event/df$duration
E(net)
df$event/df$duration
E(net)$weight <- df$event/df$duration
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
strength(net)
x
net
strength(net)
x[1, ]
cor(strength(net), x[1, ])
strength(net)
x[1, ]
cor(strength(net), x[, 1])
V(net)
colnames(x)
x
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
x[, 1]
x[1, ]
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=FALSE)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_1_name", "node_2_name")]), directed=T)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=T)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=T)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=T)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=T)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
net <- graph_from_edgelist(as.matrix(df[, c("node_2_name", "node_1_name")]), directed=T)
E(net)$weight <- df$event/df$duration
cor(strength(net), x[1, ])
E(net)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
x <- expect_warning(
extract_metric(fit_edge, "edge_weight", num_draws=10),
regexp=NA
)
expect_equal(dim(x)[1], 10)
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
expect_equal(dim(x)[1], 50)
net <- bison_to_igraph(fit_edge, 2)[[1]]
expect_true(cor(igraph::strength(net), x[1, ]) > 0)
x <- expect_error(
extract_metric(fit_edge, "not_a_metric", standardise=TRUE)
)
x <- expect_warning(
extract_metric(fit_edge, "node_strength", standardise=TRUE),
regexp=NA
)
x <- expect_warning(
extract_metric(fit_edge, "node_betweenness"),
regexp=NA
)
x <- expect_warning(
extract_metric(fit_edge, "node_eigen"),
regexp=NA
)
x <- expect_warning(
extract_metric(fit_edge, "node_degree[0.2]"),
regexp=NA
)
extract_metric(fit_edge, "node_degree[0.2]")
x <- expect_warning(
extract_metric(fit_edge, "node_degree[0]"),
regexp=NA
)
x
x <- expect_warning(
extract_metric(fit_edge, "node_degree[0.2]"),
regexp=NA
)
x
devtools::load_all(".")
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
x <- expect_warning(
extract_metric(fit_edge, "edge_weight", num_draws=10),
regexp=NA
)
expect_equal(dim(x)[1], 10)
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
x
qnorm(0.975)
devtools::load_all(".")
library(dplyr)
library(igraph)
set.seed(123)
# Load data in with minimal effects
sim_data <- simulate_bison_model("binary", aggregated = TRUE, location_effect = FALSE, age_diff_effect = FALSE)
df <- sim_data$df_sim
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
priors = get_default_priors("binary")
expect_warning(
prior_check(priors, "binary"),
regexp=NA
)
expect_warning(
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
),
regexp=NA
)
# Fit model to the data
fit_edge <- expect_warning(
bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id) + age_diff + (1 | group_id),
data=df,
model_type="binary"
),
regexp=NA
)
# Fit model to the data
fit_pool <- expect_warning(
bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
partial_pooling=TRUE,
zero_inflated=TRUE
),
regexp=NA
)
fit_null <- expect_warning (
bison_model(
(event | duration) ~ 1,
data=df,
model_type="binary",
priors=get_default_priors("binary")
),
regexp=NA
)
fit_compare <- suppressWarnings(model_comparison(list(non_random_model=fit_edge, random_model=fit_null)))
expect_output(print(fit_compare))
# Extract estimates and true values.
true <- sim_data$df_true %>%
mutate(edge_weight=edge_weight) %>%
select(node_1=node_1_id, node_2=node_2_id, true=edge_weight)
est <- get_edgelist(fit_edge, transform=FALSE) %>%
select(node_1, node_2, est=median, est_lb="5%", est_ub="95%")
comparison <- left_join(true, est, by=c("node_1", "node_2"))
# Calculate correlation between estimates and true values.
proportion_within_ci <- mean(comparison$true < comparison$est_ub & comparison$est > comparison$est_lb)
expect_gt(proportion_within_ci, 0.9)
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_edge), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10), regexp=NA)
devtools::load_all(".")
expect_warning(plot_network(fit_edge, lwd=10), regexp=NA)
expect_warning(plot_trace(fit_edge, par_ids=1), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=1), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0.1), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0.01), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0.05), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0.1), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0.2), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0.1), regexp=NA)
expect_warning(plot_network(fit_edge, lwd=10, threshold=0.1), regexp=NA)

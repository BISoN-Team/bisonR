priors <- get_default_priors("nodal_regression")
priors$fixed <- "normal(0, 1)"
priors
prior_check(priors, model_type="nodal_regression")
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
fit_nodal <- nodal_regression(
strength(node_id) ~ age_std,
fit_edge,
df_nodal,
priors=priors
)
plot_trace(fit_nodal, par_ids=1)
plot_predictions(fit_nodal, num_draws=20, type="marginal")
summary(fit_nodal)
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")[1]
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
pkgdown::build_article("getting_started")
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
social_differentiation_samples
?plot.communities
?plot
social_differentiation_samples$metric_name
devtools::load_all(".")
devtools::document()
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
0.4 * 4
logspline::logspline(social_differentiation_samples$samples)
fit_logspline <- logspline::logspline(social_differentiation_samples$samples)
logspline::dlogspline(0.45, fit_logspline)
logspline::dlogspline(0.65, fit_logspline)
curve(logspline::dlogspline(x, fit_logspline))
curve(logspline::dlogspline(x, fit_logspline))
logspline::qlogspline(0.01, fit_logspline)
logspline::qlogspline(0.99, fit_logspline)
fit_logspline <- logspline::logspline(social_differentiation_samples$samples)
devtools::load_all(".")
plot(social_differentiation_samples)
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
plot(social_differentiation_samples)
lines(density(social_differentiation_samples$samples))
plot(social_differentiation_samples)
devtools::load_all(".")
plot(social_differentiation_samples)
rstan:::rstudio_stanc("inst/stan/binary.stan")
rstan:::rstudio_stanc("inst/stan/binary.stan")
rstan:::rstudio_stanc("inst/stan/binary.stan")
usethis::use_test("data_utils")
devtools::document()
devtools::test("data_utils")
devtools::test("test-data_utils")
devtools::test("test-data_utils.R")
devtools::test_file()
gbi <- matrix(rbinom(20 * 10, 1, 0.25), 20, 10)
convert_gbi_to_bison(gbi)
warnings()
devtools::load_all(".")
devtools::test_file()
devtools::test_active_file()
devtools::test_active_file()
gbi <- matrix(rbinom(20 * 10, 1, 0.25), 20, 10)
df <- convert_gbi_to_bison(gbi)
unique(c(df$node_1, df$node_2))
expect(length(unique(c(df$node_1, df$node_2))) == ncol(gbi), TRUE)
devtools::test_active_file()
nrow(df)
nrow(gbi)
20 * 10
20 * 10 * 9
df
length(gbi)
devtools::test_active_file()
devtools::load_all(".")
devtools::test_active_file()
gbi <- matrix(rbinom(20 * 10, 1, 0.25), 20, 10)
df <- convert_gbi_to_bison(gbi)
devtools::load_all(".")
gbi <- matrix(rbinom(20 * 10, 1, 0.25), 20, 10)
df <- convert_gbi_to_bison(gbi)
# Correct length
expect(nrow(df) == 20 * 10 * 9 * 0.5, TRUE)
# Correct number of nodes
expect(length(unique(c(df$node_1, df$node_2))) == ncol(gbi), TRUE)
devtools::test_active_file()
devtools::test_active_file()
df
gbi <- matrix(rbinom(20 * 10, 1, 0.25), 20, 10)
df <- convert_gbi_to_bison(gbi)
df
devtools::load_all(".")
df <- convert_gbi_to_bison(gbi)
df
devtools::test_active_file()
i
df[i, ]$event
i <- 1
df[i, ]
df[i, ]$group_id
df[i, ]$node_1]
df[i, ]$node_1
gbi[ df[i, ]$group_id, df[i, ]$node_1])
gbi[ df[i, ]$group_id, df[i, ]$node_1]
gbi[ df[i, ]$group_id, df[i, ]$node_2]
gbi[ df[i, ]$group_id, df[i, ]$node_2] == gbi[ df[i, ]$group_id, df[i, ]$node_1]
devtools::test_active_file()
for (i in 1:nrow(df)) {
condition <- gbi[ df[i, ]$group_id, df[i, ]$node_2] == gbi[ df[i, ]$group_id, df[i, ]$node_1]
if (!condition) {
stop(i)
}
}
df[i, ]
gbi
for (i in 1:nrow(df)) {
condition <- gbi[ df[i, ]$group_id, df[i, ]$node_2] * gbi[ df[i, ]$group_id, df[i, ]$node_1] == df[i, ]$event
if (!condition) {
stop(i)
}
}
df[1, ]
gbi[ df[i, ]$group_id, df[i, ]$node_2] * gbi[ df[i, ]$group_id, df[i, ]$node_1]
gbi[ df[i, ]$group_id, df[i, ]$node_2]
gbi[ df[i, ]$group_id, df[i, ]$node_1]
gbi[1, ]
df
devtools::load_all(".")
for (i in 1:nrow(df)) {
condition <- gbi[ df[i, ]$group_id, df[i, ]$node_1] * gbi[ df[i, ]$group_id, df[i, ]$node_2] == df[i, ]$event
if (!condition) {
stop(i)
}
}
df <- convert_gbi_to_bison(gbi)
for (i in 1:nrow(df)) {
condition <- gbi[ df[i, ]$group_id, df[i, ]$node_1] * gbi[ df[i, ]$group_id, df[i, ]$node_2] == df[i, ]$event
if (!condition) {
stop(i)
}
}
devtools::load_all(".")
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test()
devtools::document()
devtools::test()
devtools::test()
usethis::use_test("edge_model_conjugate")
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
usethis::use_test("metrics")
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage()
usethis::use_test("edge_mixture")
devtools::test_coverage_active_file()
devtools::test_coverage_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage_active_file()
devtools::test_active_file()
devtools::test_coverage_active_file()
devtools::test_coverage()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
library(dplyr)
library(igraph)
set.seed(123)
# Load data in with minimal effects
sim_data <- simulate_edge_model("binary", aggregated = TRUE, location_effect = FALSE, age_diff_effect = FALSE)
df <- sim_data$df_sim
# Fit model to the data
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary"
)
# Extract estimates and true values.
true <- sim_data$df_true %>%
mutate(edge_weight=edge_weight) %>%
select(node_1=node_1_id, node_2=node_2_id, true=edge_weight)
est <- get_edgelist(fit_edge, transform=FALSE) %>%
select(node_1, node_2, est=median, est_lb="5%", est_ub="95%")
comparison <- left_join(true, est, by=c("node_1", "node_2"))
# Calculate correlation between estimates and true values.
proportion_within_ci <- mean(comparison$true < comparison$est_ub & comparison$est > comparison$est_lb)
expect_gt(proportion_within_ci, 0.9)
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_edge), regexp=NA)
expect_warning(plot_network(fit_edge), regexp=NA)
expect_warning(plot_trace(fit_edge, par_ids=1), regexp=NA)
expect_output(print(summary(fit_edge)))
# Modify comparison dataframe to test dyadic regression.
df_dyadic <- comparison
dyadic_trait <- rnorm(nrow(df_dyadic), df_dyadic$true)
df_dyadic$dyadic_trait <- dyadic_trait
dyadic_coef_true <- lm(true ~ dyadic_trait, df_dyadic)$coefficient[[2]]
prior_predictive_check(
dyad(node_1, node_2) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
df_dyadic
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
expect_warning(
fit_dyadic <- dyadic_regression(dyad(node_1, node_2) ~ dyadic_trait, fit_edge, df_dyadic, mm=FALSE),
regexp=NA
)
expect_warning(
summary(fit_dyadic),
regexp=NA
)
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_dyadic), regexp=NA)
expect_warning(plot_trace(fit_dyadic, par_ids=1), regexp=NA)
net <- graph_from_edgelist(as.matrix(comparison[, 1:2]), directed=FALSE)
E(net)$weight <- plogis(comparison[, 3])
nodal_metric <- strength(net)
nodal_metric <- nodal_metric - mean(nodal_metric)
df_nodal <- data.frame(node=factor(V(net), levels=1:length(V(net))), metric_true=nodal_metric)
df_nodal$nodal_trait <- rnorm(nrow(df_nodal), 2 * df_nodal$metric)
fit_nodal <- expect_warning(
prior_predictive_check(strength(node_id) ~ age_std, fit_edge, df_nodal),
regexp=NA
)
expect_warning(
prior_predictive_check(
strength(node) ~ nodal_trait,
data=df_nodal,
options=list(edgemodel=fit_edge),
model_type="nodal_regression",
plot_type="marginal"
),
regexp=NA
)
fit_nodal <- expect_warning(
nodal_regression(strength(node) ~ nodal_trait, fit_edge, df_nodal),
regexp=NA
)
expect_warning(
summary(fit_nodal),
regexp=NA
)
devtools::test_active_file()
devtools::test_coverage_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::test()
devtools::test_active_file()
# Load data in with minimal effects
sim_data <- simulate_edge_model("binary", aggregated = TRUE, location_effect = FALSE, age_diff_effect = FALSE)
df <- sim_data$df_sim
# Fit model to the data
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary"
)
fit_null <- expect_warning (
edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary",
priors=get_default_priors("binary")
),
regexp=NA
)
fit_compare <- suppressWarnings(model_comparison(list(non_random_model = fit_edge, random_model=fit_null)))
expect_output(print(fit_compare))
# Extract estimates and true values.
true <- sim_data$df_true %>%
mutate(edge_weight=edge_weight) %>%
select(node_1=node_1_id, node_2=node_2_id, true=edge_weight)
est <- get_edgelist(fit_edge, transform=FALSE) %>%
select(node_1, node_2, est=median, est_lb="5%", est_ub="95%")
comparison <- left_join(true, est, by=c("node_1", "node_2"))
# Calculate correlation between estimates and true values.
proportion_within_ci <- mean(comparison$true < comparison$est_ub & comparison$est > comparison$est_lb)
expect_gt(proportion_within_ci, 0.9)
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_edge), regexp=NA)
expect_warning(plot_network(fit_edge), regexp=NA)
expect_warning(plot_trace(fit_edge, par_ids=1), regexp=NA)
expect_output(print(summary(fit_edge)))
# Modify comparison dataframe to test dyadic regression.
df_dyadic <- comparison
dyadic_trait <- rnorm(nrow(df_dyadic), df_dyadic$true)
df_dyadic$dyadic_trait <- dyadic_trait
dyadic_coef_true <- lm(true ~ dyadic_trait, df_dyadic)$coefficient[[2]]
df_dyadic
sample(1:4, size=nrow(df_dyadic), replace=TRUE)
df_dyadic$group_id <- sample(1:4, size=nrow(df_dyadic), replace=TRUE)
df_dyadic$dyadic_trait <- dyadic_trait
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
df_dyadic$group_id <- as.factor(sample(1:4, size=nrow(df_dyadic), replace=TRUE))
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + group_id,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
net <- graph_from_edgelist(as.matrix(comparison[, 1:2]), directed=FALSE)
E(net)$weight <- plogis(comparison[, 3])
nodal_metric <- strength(net)
nodal_metric <- nodal_metric - mean(nodal_metric)
df_nodal <- data.frame(node=factor(V(net), levels=1:length(V(net))), metric_true=nodal_metric)
df_nodal$nodal_trait <- rnorm(nrow(df_nodal), 2 * df_nodal$metric)
df_nodal
df_nodal$group_id <- sample(1:2, nrow(df_nodal), replace=TRUE)
df_nodal
devtools::load_all(".")
expect_warning(
prior_predictive_check(
strength(node) ~ nodal_trait + (1 | group_id),
data=df_nodal,
options=list(edgemodel=fit_edge),
model_type="nodal_regression",
plot_type="marginal"
),
regexp=NA
)
df
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
df
df <- sim_data$df_sim
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
# Fit model to the data
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id) + age_diff + (1 | group_id),
data=df,
data_type="binary"
)
devtools::test_active_file()
devtools::test_coverage()
usethis::use_test()
usethis::use_test("simulations")
devtools::test_active_file()
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
devtools::load_all(".")
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
devtools::load_all(".")
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE)
priors = get_default_priors("binary")
expect_warning(
prior_check(priors, "binary")
)
expect_warning(
prior_check(priors, "binary"),
regexp=NA
)
usethis::use_test()
usethis::use_test("priors")
prior_check(get_default_priors("binary"), "binary")
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage_active_file()
devtools::test_coverage_active_file()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
qlogis(0)
plogis(0.5)
qlogis(0.5)

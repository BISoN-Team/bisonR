regexp=NA
)
summary(fit_mixture),
summary(fit_mixture)
apply(fit_mixture$component_mean_samples[[2]], 2, mean)
apply(fit_mixture$component_mean_samples[[2]], 2, sd)
apply(fit_mixture$component_mean_samples[[2]], 2, mean)
apply(fit_mixture$component_mean_samples[[3]], 2, mean)
apply(fit_mixture$component_mean_samples[[3]], 2, median)
devtools::test_active_file()
remotes::install_github("JHart96/bisonR@dev")
devtools::load_all(".")
get_component_means(fit_mixture, 3)
devtools::load_all(".")
devtools::load_all(".")
get_component_means(fit_mixture, 3)
devtools::load_all(".")
get_component_means(fit_mixture, 3)
devtools::load_all(".")
get_component_means(fit_mixture, 3)
devtools::load_all(".")
devtools::document()
devtools::test_active_file()
devtools::load_all(".")
get_component_means(fit_mixture, 3)
get_component_means(fit_mixture, 3, ci=0.5)
get_component_means(fit_mixture, 3)
?mclust::Mclust
devtools::load_all(".")
sim_data <- simulate_bison_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
fit_mixture <- expect_warning(
bison_mixture(fit_edge, num_components=3, verbose=TRUE),
regexp=NA
)
devtools::document()
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bisonR)
library(dplyr)
library(igraph)
library(brms)
sim_data <- simulate_bison_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate"
)
fit_mixture <- bison_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
get_network_component_probabilities(fit_mixture)
get_edge_component_probabilities(fit_mixture, 3)
get_component_means(fit_mixture, 3)
p <- get_edge_component_probabilities(fit_mixture, 3)
p <- as.matrix(p[, 3:ncol(p)])
component_probs <- colMeans(p)
plot(NULL, xlim=c(-10, 10), ylim=c(0, 1))
num_samples <- 1000
for (k in 1:3) {
num_comp_samples <- round(component_probs[k] * num_samples)
lines(density(fit_mixture$component_samples[[k]][sample(1:100, num_comp_samples, replace=T), k]))
}
sample(1:100, num_comp_samples, replace=T)
fit_mixture$component_samples[[k]][sample(1:100, num_comp_samples, replace=T), k]
fit_mixture$component_samples[[k]][sample(1:100, num_comp_samples, replace=T), k]
fit_mixture$component_samples[[k]]
fit_mixture$component_samples[[k]]
k
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bisonR)
library(dplyr)
library(igraph)
library(brms)
sim_data <- simulate_bison_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate"
)
fit_mixture <- bison_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
get_network_component_probabilities(fit_mixture)
get_edge_component_probabilities(fit_mixture, 3)
get_component_means(fit_mixture, 3)
df_nodal <- data.frame(node_id=as.factor(levels(df$node_1_id)), trait=rnorm(15))
df_nodal
# Set number of nodes and number of posterior samples
num_nodes <- fit_edge$num_nodes
num_draws <- 5 # Keep this short for demonstration purposes, but many more will be required for full analysis.
# Create a list of igraph networks from edgemodel to represent network posterior
nets <- bison_to_igraph(fit_edge, num_draws)
# Create an empty matrix to hold strengths of top mixture component
mix_strengths <- matrix(0, num_draws, num_nodes)
# Create an empty list for imputed versions of the dataframe
imputed_data <- list()
# Loop through each posterior sample and calculate strength of top mixture.
for (i in 1:num_draws) {
# Calculate edge components (1 if strong, 0 if weak)
edge_components <- 1 * (fit_mixture$edge_component_samples[i, 2, ] == 2)
# If the edge is strong, don't change edge weight, but if it's weak then set to zero.
E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed data to be mixture-based strength
imputed_data[[i]] <- df_nodal
imputed_data[[i]]$mix_strength <- strength(nets[[i]])
}
imputed_data[[2]]
# Generate igraph nets and choose one of them (1).
nets <- bison_to_igraph(fit_edge, num_draws)
net <- nets[[1]]
# Calculate its strength using igraph
x <- igraph::strength(net)
# Take a sample of strength using bison (again just one sample)
y <- extract_metric(fit_edge, "node_strength", num_draws=10)[1, ]
# Plot them, they should be quite linear
plot(x, y)
# Get edge weight using SRI (X/D) and make sure it matches to mean bison estimates
sri_edge_weight <- df$event/df$duration
bison_edge_weight <- plogis(apply(fit_edge$edge_samples, 2, mean))
plot(sri_edge_weight, bison_edge_weight)
# Fit a mixture model on the SRI and create pruned edge weights
sri_mixture <- mclust::Mclust(sri_edge_weight, G=2)
sri_pruned <- sri_edge_weight
sri_pruned[sri_mixture$classification != 2] = 0
# Plot pruned edge weights against original edge weights to show low SRIs have been pruned
plot(sri_pruned, sri_edge_weight)
# Assign pruned edge weights as new edge weights in igraph object and calculate new strength
E(net)$weight <- sri_pruned
sri_mix_strength <- strength(net)
# Plot new mixture-based strength against bison version from imputed_data
plot(sri_mix_strength, imputed_data[[1]]$mix_strength)
# Check that the order of edges in igraph is the same as in bison
all(igraph::as_edgelist(nets[[1]])[, 1] == get_edgelist(fit_edge)$node_1)
all(igraph::as_edgelist(nets[[1]])[, 2] == get_edgelist(fit_edge)$node_2)
fit_brm <- brm_multiple(trait ~ mix_strength, imputed_data, silent=2, refresh=0)
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes("mixture_models")
devtools::build_vignettes("mixture_models.Rmd")
devtools::document()
devtools::build_manual()
devtools::build_vignettes()
?devtools::build_vignettes()
devtools::document()
?devtools::build_manual
?devtools::build_manual()
devtools::build_manual()
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(bisonR)
library(dplyr)
library(igraph)
library(brms)
library(mclust)
sim_data <- simulate_bison_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate"
)
fit_mixture <- bison_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
get_network_component_probabilities(fit_mixture)
get_edge_component_probabilities(fit_mixture, 3)
get_component_means(fit_mixture, 3)
df_nodal <- data.frame(node_id=as.factor(levels(df$node_1_id)), trait=rnorm(15))
df_nodal
# Set number of nodes and number of posterior samples
num_nodes <- fit_edge$num_nodes
num_draws <- 5 # Keep this short for demonstration purposes, but many more will be required for full analysis.
# Create a list of igraph networks from edgemodel to represent network posterior
nets <- bison_to_igraph(fit_edge, num_draws)
# Create an empty matrix to hold strengths of top mixture component
mix_strengths <- matrix(0, num_draws, num_nodes)
# Create an empty list for imputed versions of the dataframe
imputed_data <- list()
# Loop through each posterior sample and calculate strength of top mixture.
for (i in 1:num_draws) {
# Calculate edge components (1 if strong, 0 if weak)
edge_components <- 1 * (fit_mixture$edge_component_samples[i, 2, ] == 2)
# If the edge is strong, don't change edge weight, but if it's weak then set to zero.
E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed data to be mixture-based strength
imputed_data[[i]] <- df_nodal
imputed_data[[i]]$mix_strength <- strength(nets[[i]])
}
imputed_data[[2]]
fit_brm <- brm_multiple(trait ~ mix_strength, imputed_data, silent=2, refresh=0)
fit_brm <- brm_multiple(trait ~ mix_strength, imputed_data, silent=2, refresh=0)
summary(fit_brm)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
install.packages("formatR")
devtools::build_vignettes()
devtools::build_vignettes()
brms::get_prior
brms::get_prior()
devtools::load_all(".")
sim_data <- bisonR::simulate_bison_model("binary", aggregated = TRUE)
df_sim <- sim_data$df_sim
levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
fit_brm <- expect_error (
suppressWarnings(bison_brm(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim),
num_draws=5,
silent=2,
refresh=0
)),
regexp=NA
)
fit_brm <- expect_error (
suppressWarnings(bison_brm(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim),
num_draws=5,
silent=2,
refresh=0,
sample_prior="only",
prior=brms::prior(normal(0, 10), class="b")
)),
regexp=NA
)
priors <- expect_warning(bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
),
regexp=NA
)
priors
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
x <- expect_warning(
extract_metric(fit_edge, "node_strength"),
regexp=NA
)
x
dim(x)
x <- expect_warning(
extract_metric(fit_edge, "edge_weight"),
regexp=NA
)
dim(x)
devtools::load_all(".")
x <- expect_warning(
extract_metric(fit_edge, "edge_weight"),
regexp=NA
)
dim(x)
x <- expect_warning(
extract_metric(fit_edge, "edge_weight", num_draws=10),
regexp=NA
)
dim(x)
expect_equal(dim(x), 10)
expect_equal(dim(x)[1], 10)
devtools::test_active_file()
bison_to_igraph(fit_edge, 1)
net <- bison_to_igraph(fit_edge, 1)[[1]]
igraph::strength(net)
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
expect_equal(dim(x)[1], 50)
net <- bison_to_igraph(fit_edge, 1)[[1]]
plot(igraph::strength(net), x[, 1])
x[, 1]
plot(igraph::strength(net), x[1, ])
x[1, ]
igraph::strength(net)
E(net)$weight
net <- bison_to_igraph(fit_edge, 2)[[1]]
net
plot(igraph::strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
expect_equal(dim(x)[1], 50)
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
expect_equal(dim(x)[1], 50)
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
expect_equal(dim(x)[1], 50)
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ])
x <- expect_warning(
extract_metric(fit_edge, "node_strength", num_draws=50),
regexp=NA
)
expect_equal(dim(x)[1], 50)
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ])
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
net <- bison_to_igraph(fit_edge, 2)[[1]]
cor(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
net <- bison_to_igraph(fit_edge, 2)[[1]]
cor(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
net <- bison_to_igraph(fit_edge, 2)[[1]]
plot(igraph::strength(net), x[1, ], xlab="Point estimate", ylab="BISoN posterior draw")
cor(igraph::strength(net), x[1, ])
devtools::test_active_file()
devtools::load_all(".")
sim_data <- bisonR::simulate_bison_model("binary", aggregated = TRUE)
df_sim <- sim_data$df_sim
levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
nets <- expect_warning(
bison_to_igraph(fit_edge, num_draws=10),
regexp=NA
)
devtools::load_all(".")
library(dplyr)
library(igraph)
set.seed(123)
# Load data in with minimal effects
sim_data <- simulate_bison_model("binary", aggregated = TRUE, location_effect = FALSE, age_diff_effect = FALSE)
df <- sim_data$df_sim
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
priors = get_default_priors("binary")
expect_warning(
prior_check(priors, "binary"),
regexp=NA
)
expect_warning(
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
),
regexp=NA
)
# Fit model to the data
fit_edge <- expect_warning(
bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id) + age_diff + (1 | group_id),
data=df,
model_type="binary"
),
regexp=NA
)
expect_warning(plot_network(fit_edge, lwd=10), regexp=NA)
get_default_prior("binary")
devtools::load_all(".")
get_default_prior("binary")
get_default_priors("binary")
devtools::test_active_file()
priors <- expect_warning(bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
),
regexp=NA
)
sim_data <- bisonR::simulate_bison_model("binary", aggregated = TRUE)
df_sim <- sim_data$df_sim
levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
priors <- expect_warning(bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
),
regexp=NA
)
fit_edge
bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
)
devtools::load_all(".")
priors <- expect_warning(bison_brm_get_prior(
age_diff ~ bison(edge_weight(node_1_id, node_2_id)),
list(fit_edge, fit_edge),
list(df_sim, df_sim)
),
regexp=NA
)
priors
devtools::document()

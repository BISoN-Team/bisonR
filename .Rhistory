df_1 <- df %>%
select(node_id=node_1_id, age=age_1)
df_2 <- df %>%
select(node_id=node_2_id, age=age_2)
df_nodal <- bind_rows(df_1, df_2) %>%
distinct(node_id, age) %>%
mutate(age_std=(age - mean(df_nodal$age))/sd(df_nodal$age))
# df_nodal$age_std <- df_nodal$age - mean(df_nodal$age)
df_nodal
priors <- get_default_priors("nodal_regression")
priors$fixed <- "normal(0, 1)"
priors
prior_check(priors, model_type="nodal_regression")
prior_predictive_check(
strength(node_id) ~ age,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge)
)
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge)
)
fit_nodal <- nodal_regression(strength(node_id) ~ age, fit_edge, df_nodal, priors=priors)
plot_trace(fit_nodal, par_ids=1)
plot_predictions(fit_nodal, num_draws=20)
devtools::test_coverage()
devtools::test()
devtools::test_coverage()
fit_edge$model_data$design_fixed
fit_edge$model_data$design_fixed[2]
fit_dyadic$model_data$design_fixed
fit_dyadic$model_data$design_fixed[, 1]
fit_dyadic$model_data$design_fixed[, 2]
fit_nodal$model_data$design_fixed[, 2]
fit_nodal$chain
fit_nodal$model_data$design_fixed
fit_nodal$model_data$design_fixed[, 2]
fit_nodal$obj$draws("metric_pred", format="matrix")
fit_nodal$fit$draws("metric_pred", format="matrix")
fit_nodal$fit$draws("metric_pred", format="matrix")[1, ]
fit_nodal$model_data$design_fixed[, 2]
x <- fit_nodal$model_data$design_fixed[, 2]
y <- fit_nodal$fit$draws("metric_pred", format="matrix")[1, ]
plot(x, y)
x <- fit_nodal$model_data$design_fixed[, 2]
y <- fit_nodal$fit$draws("metric_pred", format="matrix")[1, ]
plot(lm(y ~ x))
lm(y ~ x)
x <- fit_nodal$model_data$design_fixed[, 2]
y <- fit_nodal$fit$draws("metric_pred", format="matrix")[1, ]
x
length(x)
length(y)
x <- fit_nodal$model_data$design_fixed[, 2]
y <- fit_nodal$fit$draws("metric_pred", format="matrix")[1, ]
lm(y ~ x)
x
y
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
lm(y ~ x)
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
plot(lm(y ~ x))
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
abline(lm(y ~ x)
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
abline(lm(y ~ x))
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
plot(NULL)
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
plot(NULL, xlim=c(min(x), max(x)), ylim=c(min(y), max(y)))
abline(lm(y ~ x))
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
plot(NULL, xlim=c(min(x), max(x)), ylim=c(min(y), max(y)))
abline(lm(y ~ x))
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
plot(NULL, xlim=c(min(x), max(x)), ylim=c(min(y), max(y)))
abline(lm(y ~ x))
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
plot(NULL, xlim=c(min(x), max(x)), ylim=c(min(y), max(y)))
for (i in 2:20) {
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[i, ])
abline(lm(y ~ x))
}
fit_nodal$model_data$design_fixed
fit_nodal <- nodal_regression(
strength(node_id) ~ age_std,
fit_edge,
df_nodal,
priors=priors
)
x <- fit_nodal$model_data$design_fixed[, 2]
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[1, ])
plot(NULL, xlim=c(min(x), max(x)), ylim=c(min(y), max(y)))
for (i in 2:20) {
y <- as.numeric(fit_nodal$fit$draws("metric_pred", format="matrix")[i, ])
abline(lm(y ~ x))
}
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression"
)
priors <- get_default_priors("dyadic_regression")
priors$error <- "half-normal(2.5)"
priors
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression"
)
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="density"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="density"
)
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
summary(fit_dyadic)
list(hi=c(1, 2, 3), bye=c(4, 5, 6))
max(list(hi=c(1, 2, 3), bye=c(4, 5, 6)))
max(unlist(list(hi=c(1, 2, 3), bye=c(4, 5, 6))))
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
devtools::load_all(".")
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
fit_edge$model_data
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
plot_trace(fit_dyadic, par_ids=1)
plot_predictions(fit_dyadic, num_draws=20)
plot_predictions(fit_dyadic, num_draws=20)
devtools::load_all(".")
plot_predictions(fit_dyadic, num_draws=20)
plot_predictions(fit_dyadic, num_draws=20, type="marginal")
devtools::load_all(".")
plot_predictions(fit_dyadic, num_draws=20, type="marginal")
plot_predictions(fit_dyadic, num_draws=20, type="density")
plot_predictions(fit_dyadic, num_draws=20, type="marginal")
priors <- get_default_priors("dyadic_regression")
# priors$error <- "half-normal(2.5)"
priors
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_dyadic <- dyadic_regression(
dyad(node_1_id, node_2_id) ~ age_diff,
fit_edge,
df_dyadic,
mm=FALSE,
priors=priors
)
plot_trace(fit_dyadic, par_ids=1)
plot_predictions(fit_dyadic, num_draws=20, type="marginal")
devtools::load_all(".")
prior_predictive_check(
dyad(node_1_id, node_2_id) ~ age_diff,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=priors,
model_type="dyadic_regression",
plot_type="marginal"
)
plot_predictions(fit_dyadic, num_draws=20, type="marginal")
plot_predictions(fit_dyadic, num_draws=100, type="marginal")
plot_predictions(fit_dyadic, num_draws=20, type="marginal")
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
devtools::load_all(".")
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
devtools::load_all(".")
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
devtools::load_all(".")
plot_predictions(fit_dyadic, num_draws=20, type="marginal", draw_data=FALSE)
curve(y ~ x)
curve(lm(y ~ x))
abline(lm(y ~ x))
summary(fit_dyadic)
df_1 <- df %>%
select(node_id=node_1_id, age=age_1)
df_2 <- df %>%
select(node_id=node_2_id, age=age_2)
df_nodal <- bind_rows(df_1, df_2) %>%
distinct(node_id, age) %>%
mutate(age_std=(age - mean(df_nodal$age))/sd(df_nodal$age))
# df_nodal$age_std <- df_nodal$age - mean(df_nodal$age)
df_nodal
priors <- get_default_priors("nodal_regression")
priors$fixed <- "normal(0, 1)"
priors
prior_check(priors, model_type="nodal_regression")
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge)
)
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
strength(node_id) ~ age_std,
data=df_nodal,
model_type="nodal_regression",
options=list(edgemodel=fit_edge),
plot_type="marginal"
)
fit_nodal <- nodal_regression(
strength(node_id) ~ age_std,
fit_edge,
df_nodal,
priors=priors
)
plot_trace(fit_nodal, par_ids=1)
plot_predictions(fit_nodal, num_draws=20)
plot_predictions(fit_nodal, num_draws=20, type="marginal")
summary(fit_nodal)
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")[1]
draw_network_metric_samples(fit_edge, "social_differentiation")$samples
plot(density(draw_network_metric_samples(fit_edge, "social_differentiation")))
draw_network_metric_samples(fit_edge, "social_differentiation")
rstan:::rstudio_stanc("inst/stan/binary.stan")
rstan:::rstudio_stanc("inst/stan/binary.stan")
rstan:::rstudio_stanc("inst/stan/binary.stan")
rstan:::rstudio_stanc("inst/stan/binary.stan")
rstan:::rstudio_stanc("inst/stan/binary.stan")
rstan:::rstudio_stanc("inst/stan/binary.stan")
plot(density(plogis(rnorm(1e5, 0, 0.5))))
plot(density(plogis(rnorm(1e5, 0, 0.25))))
plot(density(plogis(rnorm(1e5, 0, 0.5))))
devtools::load_all(".")
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
prior_check(priors, "binary")
priors$edge <- "normal(-2, 1)"
prior_check(priors, "binary")
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=2)
plot_predictions(fit_edge, num_draws=20, type="density")
summary(fit_edge)
fit_edge$log_lik
loo::loo(fit_edge$log_lik)
loo::compare(fit_edge$log_lik)
loo::loo_compare(fit_edge$log_lik, fit_edge$log_lik)
loo::loo_compare(c(fit_edge$log_lik, fit_edge$log_lik))
loo::loo_compare(list(fit_edge$log_lik, fit_edge$log_lik))
loo::loo_compare(loo::loo(fit_edge$log_lik), loo::loo::(fit_edge$log_lik))
loo::loo_compare(loo::loo(fit_edge$log_lik), loo::loo(fit_edge$log_lik))
fit_null <- edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary",
priors=priors
)
fit_null <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary"
)
loo_1 <- loo::loo(fit_edge)
loo_1 <- loo::loo(fit_edge$log_lik)
loo_2 <- loo::loo(fit_null$log_lik)
loo::loo_compare(loo_1, loo_2)

prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
expect_warning(
fit_dyadic <- dyadic_regression(dyad(node_1, node_2) ~ dyadic_trait, fit_edge, df_dyadic, mm=FALSE),
regexp=NA
)
expect_warning(
summary(fit_dyadic),
regexp=NA
)
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_dyadic), regexp=NA)
expect_warning(plot_trace(fit_dyadic, par_ids=1), regexp=NA)
net <- graph_from_edgelist(as.matrix(comparison[, 1:2]), directed=FALSE)
E(net)$weight <- plogis(comparison[, 3])
nodal_metric <- strength(net)
nodal_metric <- nodal_metric - mean(nodal_metric)
df_nodal <- data.frame(node=factor(V(net), levels=1:length(V(net))), metric_true=nodal_metric)
df_nodal$nodal_trait <- rnorm(nrow(df_nodal), 2 * df_nodal$metric)
fit_nodal <- expect_warning(
prior_predictive_check(strength(node_id) ~ age_std, fit_edge, df_nodal),
regexp=NA
)
expect_warning(
prior_predictive_check(
strength(node) ~ nodal_trait,
data=df_nodal,
options=list(edgemodel=fit_edge),
model_type="nodal_regression",
plot_type="marginal"
),
regexp=NA
)
fit_nodal <- expect_warning(
nodal_regression(strength(node) ~ nodal_trait, fit_edge, df_nodal),
regexp=NA
)
expect_warning(
summary(fit_nodal),
regexp=NA
)
devtools::test_active_file()
devtools::test_coverage_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
devtools::test()
devtools::test_active_file()
# Load data in with minimal effects
sim_data <- simulate_edge_model("binary", aggregated = TRUE, location_effect = FALSE, age_diff_effect = FALSE)
df <- sim_data$df_sim
# Fit model to the data
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary"
)
fit_null <- expect_warning (
edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary",
priors=get_default_priors("binary")
),
regexp=NA
)
fit_compare <- suppressWarnings(model_comparison(list(non_random_model = fit_edge, random_model=fit_null)))
expect_output(print(fit_compare))
# Extract estimates and true values.
true <- sim_data$df_true %>%
mutate(edge_weight=edge_weight) %>%
select(node_1=node_1_id, node_2=node_2_id, true=edge_weight)
est <- get_edgelist(fit_edge, transform=FALSE) %>%
select(node_1, node_2, est=median, est_lb="5%", est_ub="95%")
comparison <- left_join(true, est, by=c("node_1", "node_2"))
# Calculate correlation between estimates and true values.
proportion_within_ci <- mean(comparison$true < comparison$est_ub & comparison$est > comparison$est_lb)
expect_gt(proportion_within_ci, 0.9)
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_edge), regexp=NA)
expect_warning(plot_network(fit_edge), regexp=NA)
expect_warning(plot_trace(fit_edge, par_ids=1), regexp=NA)
expect_output(print(summary(fit_edge)))
# Modify comparison dataframe to test dyadic regression.
df_dyadic <- comparison
dyadic_trait <- rnorm(nrow(df_dyadic), df_dyadic$true)
df_dyadic$dyadic_trait <- dyadic_trait
dyadic_coef_true <- lm(true ~ dyadic_trait, df_dyadic)$coefficient[[2]]
df_dyadic
sample(1:4, size=nrow(df_dyadic), replace=TRUE)
df_dyadic$group_id <- sample(1:4, size=nrow(df_dyadic), replace=TRUE)
df_dyadic$dyadic_trait <- dyadic_trait
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
df_dyadic$group_id <- as.factor(sample(1:4, size=nrow(df_dyadic), replace=TRUE))
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + group_id,
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
devtools::load_all(".")
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
)
net <- graph_from_edgelist(as.matrix(comparison[, 1:2]), directed=FALSE)
E(net)$weight <- plogis(comparison[, 3])
nodal_metric <- strength(net)
nodal_metric <- nodal_metric - mean(nodal_metric)
df_nodal <- data.frame(node=factor(V(net), levels=1:length(V(net))), metric_true=nodal_metric)
df_nodal$nodal_trait <- rnorm(nrow(df_nodal), 2 * df_nodal$metric)
df_nodal
df_nodal$group_id <- sample(1:2, nrow(df_nodal), replace=TRUE)
df_nodal
devtools::load_all(".")
expect_warning(
prior_predictive_check(
strength(node) ~ nodal_trait + (1 | group_id),
data=df_nodal,
options=list(edgemodel=fit_edge),
model_type="nodal_regression",
plot_type="marginal"
),
regexp=NA
)
df
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
df
df <- sim_data$df_sim
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
# Fit model to the data
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id) + age_diff + (1 | group_id),
data=df,
data_type="binary"
)
devtools::test_active_file()
devtools::test_coverage()
usethis::use_test()
usethis::use_test("simulations")
devtools::test_active_file()
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
devtools::load_all(".")
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
devtools::load_all(".")
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
expect_warning(
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE),
regexp=NA
)
simulate_edge_model("duration", aggregated = FALSE, location_effect = TRUE, age_diff_effect = TRUE)
priors = get_default_priors("binary")
expect_warning(
prior_check(priors, "binary")
)
expect_warning(
prior_check(priors, "binary"),
regexp=NA
)
usethis::use_test()
usethis::use_test("priors")
prior_check(get_default_priors("binary"), "binary")
devtools::test_active_file()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage()
devtools::test_active_file()
devtools::test_active_file()
devtools::test_coverage_active_file()
devtools::test_coverage_active_file()
devtools::test_coverage()
devtools::test_coverage()
devtools::test_coverage()
qlogis(0)
plogis(0.5)
qlogis(0.5)
devtools::document()
devtools::test_coverage_active_file()
devtools::test_coverage_active_file()
devtools::test_coverage_active_file()
library(dplyr)
library(igraph)
set.seed(123)
# Load data in with minimal effects
sim_data <- simulate_edge_model("binary", aggregated = TRUE, location_effect = FALSE, age_diff_effect = FALSE)
df <- sim_data$df_sim
df$group_id <- sample(1:4, nrow(df), replace=TRUE)
priors = get_default_priors("binary")
expect_warning(
prior_check(priors, "binary"),
regexp=NA
)
expect_warning(
prior_predictive_check(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
model_type="binary",
priors=priors
),
regexp=NA
)
# Fit model to the data
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id) + age_diff + (1 | group_id),
data=df,
data_type="binary"
)
fit_null <- expect_warning (
edge_model(
(event | duration) ~ 1,
data=df,
data_type="binary",
priors=get_default_priors("binary")
),
regexp=NA
)
expect_warning(plot_trace(fit_null, par_ids=1), regexp=NA)
fit_compare <- suppressWarnings(model_comparison(list(non_random_model = fit_edge, random_model=fit_null)))
expect_output(print(fit_compare))
# Extract estimates and true values.
true <- sim_data$df_true %>%
mutate(edge_weight=edge_weight) %>%
select(node_1=node_1_id, node_2=node_2_id, true=edge_weight)
est <- get_edgelist(fit_edge, transform=FALSE) %>%
select(node_1, node_2, est=median, est_lb="5%", est_ub="95%")
comparison <- left_join(true, est, by=c("node_1", "node_2"))
# Calculate correlation between estimates and true values.
proportion_within_ci <- mean(comparison$true < comparison$est_ub & comparison$est > comparison$est_lb)
expect_gt(proportion_within_ci, 0.9)
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_edge), regexp=NA)
expect_warning(plot_network(fit_edge), regexp=NA)
expect_warning(plot_trace(fit_edge, par_ids=1), regexp=NA)
expect_output(print(summary(fit_edge)))
# Modify comparison dataframe to test dyadic regression.
df_dyadic <- comparison
dyadic_trait <- rnorm(nrow(df_dyadic), df_dyadic$true)
df_dyadic$group_id <- as.factor(sample(1:4, size=nrow(df_dyadic), replace=TRUE))
df_dyadic$dyadic_trait <- dyadic_trait
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
expect_warning(
fit_dyadic <- dyadic_regression(dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id), fit_edge, df_dyadic, mm=FALSE),
regexp=NA
)
expect_warning(
summary(fit_dyadic),
regexp=NA
)
expect_output(
print(summary(fit_dyadic))
)
fit_dyadic
summary(fit_dyadic)
dyadic_trait
df_dyadic <- comparison
dyadic_trait <- rnorm(nrow(df_dyadic), df_dyadic$true)
df_dyadic$group_id <- as.factor(sample(1:4, size=nrow(df_dyadic), replace=TRUE))
df_dyadic$dyadic_trait <- as.factor(sample(1:2, size=nrow(df_dyadic), replace=TRUE))
expect_warning(
prior_predictive_check(
dyad(node_1, node_2) ~ dyadic_trait + (1 | group_id),
data=df_dyadic,
options=list(edgemodel=fit_edge, mm=FALSE),
priors=get_default_priors("dyadic_regression"),
model_type="dyadic_regression",
plot_type="marginal"
),
regexp=NA
)
df_dyadic <- comparison
dyadic_trait <- rnorm(nrow(df_dyadic), df_dyadic$true)
df_dyadic$group_id <- as.factor(sample(1:4, size=nrow(df_dyadic), replace=TRUE))
df_dyadic$dyadic_trait <- as.factor(sample(1:2, size=nrow(df_dyadic), replace=TRUE))
expect_warning(
fit_dyadic <- dyadic_regression(dyad(node_1, node_2) ~ dyadic_trait, fit_edge, df_dyadic, mm=FALSE),
regexp=NA
)
summary(fit_dyadic)
get_contrasts(fit_dyadic, "fixed_dyadic_trait1", "fixed_dyadic_trait2")
usethis::use_test("directed_edge_model")
priors$edge <- "normal(0, 1)"
prior_check(priors, "binary")
priors$edge <- "normal(0, 1)"
prior_check(priors, "binary")
priors$edge <- "normal(0, 5)"
prior_check(priors, "binary")
priors$edge <- "normal(-1, 5)"
prior_check(priors, "binary")
priors$edge <- "normal(-2, 5)"
prior_check(priors, "binary")
priors$edge <- "normal(-1, 2.5)"
prior_check(priors, "binary")
priors$edge <- "normal(-1, 1)"
prior_check(priors, "binary")
priors$edge <- "normal(-1, 2.5)"
prior_check(priors, "binary")
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
summary(fit_edge)
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
devtools::load_all(".")
get_edgelist(fit_edge)
fit_edge$edge_samples
dim(fit_edge$edge_samples)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
dim(fit_edge$edge_samples)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
df$node_1_id
cbind(df$node_1_id, df$node_2_id)
x <- matrix(0, 10, 10)
x[cbind(df$node_1_id, df$node_2_id)]
x[cbind(df$node_1_id, df$node_2_id)] <- 1
x
cbind(df$node_1_id, df$node_2_id)
unique(cbind(df$node_1_id, df$node_2_id))
unique(rbind(cbind(df$node_1_id, df$node_2_id), cbind(df$node_2_id, df$node_1_id)))
unique(rbind(cbind(df$node_1_id[1:40], df$node_2_id[1:40]), cbind(df$node_2_id, df$node_1_id)))
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=TRUE,
priors=priors
)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
directed=F,
priors=priors
)
curve(dbeta(x, 1 + theta * time, 1 + (1 - theta) * time))
theta <- 0.6
time <- 10
curve(dbeta(x, 1 + theta * time, 1 + (1 - theta) * time))
time <- 1000
curve(dbeta(x, 1 + theta * time, 1 + (1 - theta) * time))
dbeta2 <- function(x, p, rho) dbeta(x, p * (1 - rho)/rho, (1 - rho)/rho + p * (1 + rho)/rho)
curve(dbeta(x, 0.5, 0.9)
curve(dbeta(x, 0.5, 0.9))
curve(dbeta(x, 0.5, 0.9))
curve(dbeta(x, 0.5, 0.5))
curve(dbeta(x, 0.5, 0.1))
curve(dbeta2(x, 0.5, 0.9))
curve(dbeta2(x, 0.5, 0.5))
curve(dbeta2(x, 0.5, 0.1))
curve(dbeta2(x, 0.5, 0.01))
curve(dbeta2(x, 1, 0.01))
curve(dbeta2(x, 10, 0.01))
dbeta2 <- function(x, p, rho) dbeta(x, p * (1 - rho)/rho, (1 - rho)/rho + p * (1 + rho)/rho)
curve(dbeta2(x, 10, 0.01))
curve(dbeta2(x, 100, 0.01))
curve(dbeta2(x, 100, 0.5))
curve(dbeta2(x, 100, 0))
curve(dbeta2(x, 0.5, 0))
curve(dbeta2(x, 0.5, 0.01))
curve(dbeta2(x, 0.5, 0.1))

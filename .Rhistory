pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_site()
plot(density(rgamma(1e5, 1, 10)))
plot(density(rgamma(1e5, 1, 100)))
plot(density(rgamma(1e5, 1, 10)))
plot(density(rgamma(1e5, 1, 2)))
mean(rgamma(1e5, 1, 2))
mode(rgamma(1e5, 1, 2))
mode(rgamma(1e5, 2, 2))
plot(density(rgamma(1e5, 2, 2)))
plot(density(rgamma(1e5, 10, 2)))
plot(density(rgamma(1e5, 0.1, 2)))
plot(density(rgamma(1e5, 0.5, 2)))
plot(density(rgamma(1e5, 0.5, 10)))
plot(density(rgamma(1e5, 0.5, 0.5)))
plot(density(rgamma(1e5, 0.1, 0.1)))
mean(rgamma(1e5, 0.1, 0.1))
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
pkgdown::build_home_index(); pkgdown::init_site()
library(bisonR)
print(fit_edge)
library(bisonR)
data("binary_ex1")
df <- binary_ex1
head(df)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="vb", mc_cores=4, verbose=TRUE)
print(fit_edge)
plot(fit_edge)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
print(fit_edge)
plot(fit_edge)
"mcmc" in c("mcmc", "vb")
"mcmc" %in% c("mcmc", "vb")
devtools::load_all()
devtools::document()
devtools::load_all()
diagnostic_plot(fit_edge)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
print(fit_edge)
diagnostic_plot(fit_edge)
devtools::document()
devtools::document()
devtools::load_all()
diagnostic_plot(fit_edge)
diagnostic_plot(fit_edge)
class(fit_edge)
devtools::document()
devtools::load_all()
diagnostic_plot(fit_edge)
fit_edge$dyad_mapping
fit_edge$chain
dim(fit_edge$chain)
fit_edge$dyad_mapping
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge$node_to_idx
which(fit_edge$dyad_mapping == 1)
which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)
fit_edge$dyad_mapping == 1
which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)
which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, ]
fit_edge$node_to_idx[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, ]]
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, ]]
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]
paste(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]])
paste(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]], sep="<->")
paste(c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]), sep="<->")
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]
names(fit_edge$node_to_idx)
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]
do.call(paste(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]], sep="<->"))
do.call(paste(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]), sep="<->")
do.call(paste, names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]], sep="<->")
do.call(paste, names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]])
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]
do.call(paste, c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]))
do.call(paste, list(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]))
do.call(paste, list(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]), sep="<")
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]])
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]
class(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]])
names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]
c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]])
c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]])[1]
c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]])[2]
paste0(c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]))
paste0(c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]), collapse="")
paste0(c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]), collapse="<->")
paste0(c(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]]), collapse=" <-> ")
paste0(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == 1, arr.ind=TRUE)[1, 2:1]], collapse=" <-> ")
sapply(
1:max(fit_edge$dyad_mapping),
function(x) paste0(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == x, arr.ind=TRUE)[1, 2:1]], collapse=" <-> ")
)
df
dyad_names <- sapply(
1:max(fit_edge$dyad_mapping),
function(x) paste0(names(fit_edge$node_to_idx)[which(fit_edge$dyad_mapping == x, arr.ind=TRUE)[1, 2:1]], collapse=" <-> ")
)
edge_samples <- fit_edge$chain
edge_lower <- apply(edge_samples, 2, function(x) quantile(x, probs=0.05))
edge_upper <- apply(edge_samples, 2, function(x) quantile(x, probs=0.95))
edge_median <- apply(edge_samples, 2, function(x) quantile(x, probs=0.5))
edge_list <- cbind(
"median"=round(edge_median, 3),
"5%"=round(edge_lower, 3),
"95%"=round(edge_upper, 3)
)
rownames(edge_list) <- dyad_names
edge_list
devtools::document()
devtools::load_all()
print(fit_edge)
print(fit_edge, ci=0.8)
0.5 * (1 - 0.9)
0.5 * (1 - 0.95)
0.5 * (1 - 0.99)
0.5 * (1 - 0.8)
names(edge_list)
rownames(edge_list)
colnames(edge_list)
devtools::load_all()
print(fit_edge, ci=0.8)
print(fit_edge, ci=0.9)
print(fit_edge, ci=0.99)
print(fit_edge, ci=0.9)
diagnostic_plot(fit_edge)
fit_edge$model_data
df
fit_edge$formula
labels(terms(fit_edge$formula))
labels(terms(fit_edge$formula))[1]
labels(terms(fit_edge$formula))[[1]]
fit_edge$formula
fit_edge$dyad_mapping
fit_edge$dyad_mapping[df$node_1, df$node_2]
obs <- get_all_vars(fit_edge$formula, df)
obs
obs[, 2]
obs <- get_all_vars(fit_edge$formula, df)
fit_edge$dyad_mapping[obs[, 2], obs[, 3]]
fit_edge
obs <- get_all_vars(fit_edge$formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[obs[, 2], obs[, 3]]
obs
obs
obs
obs <- get_all_vars(fit_edge$formula, df)
obs
fit_edge$dyad_mapping[obs[, 2], obs[, 3]]
dim(fit_edge$dyad_mapping[df$node_1, df$node_2])
dim(fit_edge$dyad_mapping[cbind(df$node_1, df$node_2)])
fit_edge$dyad_mapping[cbind(df$node_1, df$node_2)]
obs <- get_all_vars(fit_edge$formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
obs
df
fit_edge$formula
terms(fit_edge$formula)
labels(terms(fit_edge$formula))
names(terms(fit_edge$formula))
all.vars(fit_edge$formula)[[1]]
reformulate(termlabels = c('x', 'z'), response = all.vars(fit_edge$formula)[[1]], intercept = FALSE)
reformulate(termlabels = c('x', 'z'), response = all.vars(fit_edge$formula)[[1]])
reformulate(termlabels = c('0', 'x', 'z'), response = all.vars(fit_edge$formula)[[1]])
labels(terms(fit_edge$formula)))[2:]
labels(terms(fit_edge$formula))[2:]
labels(terms(fit_edge$formula))
labels(terms(fit_edge$formula))[1]
model_formula <- event ~ dyad(node_1, node_2)
model_formula
model_formula <- event ~ dyad(node_1, node_2)
model_formula
reformulate(termlabels = c('0', 'dyad_id'), response = all.vars(model_formula)[[1]])
model_formula <- event ~ dyad(node_1, node_2) + dyad_type + (1 | location)
model_formula
terms(mode)
labels(terms(model_formula))
labels(terms(model_formula))[2:]
tail(labels(terms(model_formula)), -2)
tail(labels(terms(model_formula)), -1)
model_formula <- event ~ dyad(node_1, node_2) + dyad_type + (1 | location)
model_formula
reformulate(termlabels = c('0', 'dyad_id', tail(labels(terms(model_formula)), -1)), response = all.vars(model_formula)[[1]])
formula <- event ~ dyad(node_1, node_2) + dyad_type + (1 | location)
formula
length(labels(terms(formula))
length(labels(terms(formula)
length(labels(terms(formula)
length(labels(terms(formula)))
length(labels(terms(formula)))
reformulate(termlabels = c('0', 'dyad_id', "f(loc, model="iid", hyper=prior.random)", tail(labels(terms(model_formula)), -1)), response = all.vars(model_formula)[[1]])
reformulate(termlabels = c('0', 'dyad_id', "f(loc, model='iid', hyper=prior.random)", tail(labels(terms(model_formula)), -1)), response = all.vars(model_formula)[[1]])
if (length(labels(terms(formula))) > 1) {
additional_effects <- labels(terms(formula))
additional_effects <- additional_effects[2:length(additional_effects)]
for (i in 1:length(additional_effects)) {
if (any(grep("\\|", additional_effects[i]))) {
# Random effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, paste0("f(", term_name, ", model='iid', hyper=prior.random)"))
} else {
# Fixed effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, term_name)
}
}
}
term_labels <- c('0', 'dyad_id')
if (length(labels(terms(formula))) > 1) {
additional_effects <- labels(terms(formula))
additional_effects <- additional_effects[2:length(additional_effects)]
for (i in 1:length(additional_effects)) {
if (any(grep("\\|", additional_effects[i]))) {
# Random effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, paste0("f(", term_name, ", model='iid', hyper=prior.random)"))
} else {
# Fixed effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, term_name)
}
}
}
term_labels
# Random effect
additional_effects[i]
labels(terms(formula))[i]
labels(terms(formula))[i + 1]
model_formula <- event ~ dyad(node_1, node_2)
formula <- event ~ dyad(node_1, node_2) + dyad_type + (1 | location)
formula
obs <- get_all_vars(fit_edge$formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
obs
obs
fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
obs <- get_all_vars(fit_edge$formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
obs
term_labels <- c('0', 'dyad_id')
term_labels <- c('0', 'dyad_id')
if (length(labels(terms(formula))) > 1) {
additional_effects <- labels(terms(formula))
additional_effects <- additional_effects[2:length(additional_effects)]
for (i in 1:length(additional_effects)) {
if (any(grep("\\|", additional_effects[i]))) {
# Random effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, paste0("f(", term_name, ", model='iid', hyper=prior.random)"))
} else {
# Fixed effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, term_name)
}
}
}
term_labels
term_vars
df
formula <- event ~ dyad(node_1, node_2) + type_1 + (1 | location)
formula
obs <- get_all_vars(fit_edge$formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
obs
get_all_vars(fit_edge$formula, df)
et_all_vars(formula, df)
get_all_vars(formula, df)
obs <- get_all_vars(formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
obs
term_labels <- c('0', 'dyad_id')
if (length(labels(terms(formula))) > 1) {
additional_effects <- labels(terms(formula))
additional_effects <- additional_effects[2:length(additional_effects)]
for (i in 1:length(additional_effects)) {
if (any(grep("\\|", additional_effects[i]))) {
# Random effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, paste0("f(", term_name, ", model='iid', hyper=prior.random)"))
} else {
# Fixed effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, term_name)
}
}
}
term_labels
reformulate(termlabels = term_labels, response = all.vars(model_formula)[[1]])
formula <- event ~ dyad(node_1, node_2)
formula
obs <- get_all_vars(formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
obs
term_labels <- c('0', 'dyad_id')
if (length(labels(terms(formula))) > 1) {
additional_effects <- labels(terms(formula))
additional_effects <- additional_effects[2:length(additional_effects)]
for (i in 1:length(additional_effects)) {
if (any(grep("\\|", additional_effects[i]))) {
# Random effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, paste0("f(", term_name, ", model='iid', hyper=prior.random)"))
} else {
# Fixed effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, term_name)
}
}
}
term_labels
reformulate(termlabels = term_labels, response = all.vars(model_formula)[[1]])
obs <- get_all_vars(formula, df)
obs$dyad_id <- fit_edge$dyad_mapping[cbind(obs[, 2], obs[, 3])]
term_labels <- c('0', 'dyad_id')
if (length(labels(terms(formula))) > 1) {
additional_effects <- labels(terms(formula))
additional_effects <- additional_effects[2:length(additional_effects)]
for (i in 1:length(additional_effects)) {
if (any(grep("\\|", additional_effects[i]))) {
# Random effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, paste0("f(", term_name, ", model='iid', hyper=prior.random)"))
} else {
# Fixed effect
term_vars <- sapply(colnames(obs), function(x) grepl(x, additional_effects[i]))
term_var <- term_vars[term_vars == TRUE][1]
term_name <- names(term_var)
term_labels <- c(term_labels, term_name)
}
}
}
reformulate(termlabels = term_labels, response = all.vars(model_formula)[[1]])
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="vb", mc_cores=4, verbose=TRUE)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.9)
diagnostic_plot(fit_edge)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.9)
print(fit_edge, ci=0.8)
fit_edge_inla <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.8)
print(fit_edge_inla, ci=0.8)
fit_edge$chain
dim(fit_edge$chain)
dim(fit_edge_inla$chain)
apply(fit_edge_inla$chain, 2, mean)
devtools::load_all()
fit_edge_inla <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge_inla <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
print(fit_edge_inla, ci=0.8)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_inla$chain, 2, mean))
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.8)
diagnostic_plot(fit_edge)
devtools::document()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.8)
diagnostic_plot(fit_edge)
formula
formula
reformulate(termlabels = labels(terms(formula)), all.vars(formula))
reformulate(termlabels = labels(terms(formula)), response=all.vars(formula)[1])
formula
reformulate(termlabels = labels(terms(formula)), response=all.vars(formula)[1])
reformulate(termlabels = c(labels(terms(formula)), "something"), response=all.vars(formula)[1])
reformulate(termlabels = c(labels(terms(formula)), "offset(log(something))"), response=all.vars(formula)[1])
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.8)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=2, method="inla", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="inla", mc_cores=4, verbose=TRUE)
pkgbuild::compile_dll(path = ".", force = T)
roxygen2::roxygenize()
devtools::test()
devtools::load_all()
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", method="mcmc", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.8)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=2, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=2, method="inla", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(coef=1)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=1, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=1, method="inla", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
print(fit_edge, ci=0.8)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="inla", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
print(fit_edge, ci=0.8)
fit_edge_2
fit_edge$stan_model
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="inla", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="inla", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
print(fit_edge, ci=0.8)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
print(fit_edge, ci=0.8)
devtools::load_all()
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="inla", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
print(fit_edge, ci=0.8)
devtools::load_all()
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="inla", mc_cores=4, verbose=TRUE)
print(fit_edge, ci=0.8)
print(fit_edge_2, ci=0.8)
fit_edge$model_data
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=1, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
print(fit_edge_2, ci=0.8)
fit_edge_2$stan_model
fit_edge_2$model_data
devtools::load_all()
library(bisonR)
data("binary_ex1")
df <- binary_ex1
head(df)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=1, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
fit_edge_2$model_data
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=1, method="vb", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="vb", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
print(fit_edge_2, ci=0.8)
fit_edge <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="inla", mc_cores=4, verbose=TRUE)
fit_edge_2 <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="vb", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge$chain, 2, mean), apply(fit_edge_2$chain, 2, mean))
abline(a=0, b=1)
print(fit_edge_2, ci=0.8)
fit_edge_mcmc <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="mcmc", mc_cores=4, verbose=TRUE)
fit_edge_vb <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="vb", mc_cores=4, verbose=TRUE)
fit_edge_inla <- edge_model(event ~ dyad(node_1, node_2), data=df, data_type="binary", durations=10, method="inla", mc_cores=4, verbose=TRUE)
plot(apply(fit_edge_mcmc$chain, 2, mean), apply(fit_edge_vb$chain, 2, mean))
points(apply(fit_edge_mcmc$chain, 2, mean), apply(fit_edge_inla$chain, 2, mean), col="red")
abline(a=0, b=1)
# print(fit_edge_2, ci=0.8)

E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed network to be mixture-based strength
mice_obj$imp$bison_node_strength[, i] <- strength(nets[[i]])
}
mice_obj$imp
# Set number of nodes and number of posterior samples
num_nodes <- fit_edge$num_nodes
num_draws <- dim(fit_mixture$edge_component_samples)[1]
# Create a list of igraph networks from edgemodel to represent network posterior
nets <- bison_to_igraph(fit_edge, num_draws)
# Create an empty matrix to hold strengths of top mixture component
mix_strengths <- matrix(0, num_draws, num_nodes)
# Create a multiple imputation MICE object with an arbitrary metric (strength here but could be anything, only affects variable name)
mice_obj <- bison_mice(fit_edge, df_nodal, "node_id", "node", "strength", num_draws=num_draws)
# Loop through each posterior sample and calculate strength of top mixture.
for (i in 1:num_draws) {
# Calculate edge components (1 if strong, 0 if weak)
edge_components <- fit_mixture$edge_component_samples[i, 2, ] - 1
# If the edge is strong, don't change edge weight, but if it's weak then set to zero.
E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed network to be mixture-based strength
mice_obj$imp$bison_node_strength[, i] <- strength(nets[[i]])
}
# Set number of nodes and number of posterior samples
num_nodes <- fit_edge$num_nodes
num_draws <- dim(fit_mixture$edge_component_samples)[1]
# Create a list of igraph networks from edgemodel to represent network posterior
nets <- bison_to_igraph(fit_edge, num_draws)
# Create an empty matrix to hold strengths of top mixture component
mix_strengths <- matrix(0, num_draws, num_nodes)
# Create a multiple imputation MICE object with an arbitrary metric (strength here but could be anything, only affects variable name)
mice_obj <- bison_mice(fit_edge, df_nodal, "node_id", "node", "strength", num_draws=num_draws)
imputed_data <- list()
# Loop through each posterior sample and calculate strength of top mixture.
for (i in 1:num_draws) {
# Calculate edge components (1 if strong, 0 if weak)
edge_components <- fit_mixture$edge_component_samples[i, 2, ] - 1
# If the edge is strong, don't change edge weight, but if it's weak then set to zero.
E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed data to be mixture-based strength
imputed_data[[i]] <- df_nodal
imputed_data[[i]]$mix_strength <- strength(nets[[i]])
}
imputed_data
# Set number of nodes and number of posterior samples
num_nodes <- fit_edge$num_nodes
num_draws <- dim(fit_mixture$edge_component_samples)[1]
# Create a list of igraph networks from edgemodel to represent network posterior
nets <- bison_to_igraph(fit_edge, num_draws)
# Create an empty matrix to hold strengths of top mixture component
mix_strengths <- matrix(0, num_draws, num_nodes)
# Create a multiple imputation MICE object with an arbitrary metric (strength here but could be anything, only affects variable name)
mice_obj <- bison_mice(fit_edge, df_nodal, "node_id", "node", "strength", num_draws=num_draws)
imputed_data <- list()
# Loop through each posterior sample and calculate strength of top mixture.
for (i in 1:num_draws) {
# Calculate edge components (1 if strong, 0 if weak)
edge_components <- fit_mixture$edge_component_samples[i, 2, ] - 1
# If the edge is strong, don't change edge weight, but if it's weak then set to zero.
E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed data to be mixture-based strength
imputed_data[[i]] <- df_nodal
imputed_data[[i]]$mix_strength <- strength(nets[[i]])
}
imputed_data[[1]]
# Set number of nodes and number of posterior samples
num_nodes <- fit_edge$num_nodes
num_draws <- dim(fit_mixture$edge_component_samples)[1]
# Create a list of igraph networks from edgemodel to represent network posterior
nets <- bison_to_igraph(fit_edge, num_draws)
# Create an empty matrix to hold strengths of top mixture component
mix_strengths <- matrix(0, num_draws, num_nodes)
# Create a multiple imputation MICE object with an arbitrary metric (strength here but could be anything, only affects variable name)
mice_obj <- bison_mice(fit_edge, df_nodal, "node_id", "node", "strength", num_draws=num_draws)
imputed_data <- list()
# Loop through each posterior sample and calculate strength of top mixture.
for (i in 1:num_draws) {
# Calculate edge components (1 if strong, 0 if weak)
edge_components <- fit_mixture$edge_component_samples[i, 2, ] - 1
# If the edge is strong, don't change edge weight, but if it's weak then set to zero.
E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed data to be mixture-based strength
imputed_data[[i]] <- df_nodal
imputed_data[[i]]$mix_strength <- strength(nets[[i]])
}
imputed_data[[2]]
brm_multiple(trait ~ mix_strength, imputed_data)
?brm_multiple
# Set number of nodes and number of posterior samples
num_nodes <- fit_edge$num_nodes
num_draws <- 5 # Keep this short for demonstration purposes, but many more will be required for full analysis.
# Create a list of igraph networks from edgemodel to represent network posterior
nets <- bison_to_igraph(fit_edge, num_draws)
# Create an empty matrix to hold strengths of top mixture component
mix_strengths <- matrix(0, num_draws, num_nodes)
# Create an empty list for imputed versions of the dataframe
imputed_data <- list()
# Loop through each posterior sample and calculate strength of top mixture.
for (i in 1:num_draws) {
# Calculate edge components (1 if strong, 0 if weak)
edge_components <- fit_mixture$edge_component_samples[i, 2, ] - 1
# If the edge is strong, don't change edge weight, but if it's weak then set to zero.
E(nets[[i]])$weight <- E(nets[[i]])$weight * edge_components
# Change the metric values of the imputed data to be mixture-based strength
imputed_data[[i]] <- df_nodal
imputed_data[[i]]$mix_strength <- strength(nets[[i]])
}
imputed_data[[2]]
brm_multiple(trait ~ mix_strength, imputed_data)
brm_multiple(trait ~ mix_strength, imputed_data, silent=2, refresh=0)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df$event <- max(0, rnorm(nrow(df), df$event, 0.1))
df$duration <- max(0, rnorm(nrow(df), df$divisor, 0.1))
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df$event <- max(0, rnorm(nrow(df), df$event, 0.1))
df$duration <- max(0, rnorm(nrow(df), df$duration, 0.1))
df
nrow(df)
df$event
rnorm(nrow(df), df$event)
max(0, rnorm(nrow(df), df$event))
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
convert_duration_to_binary(df, "event", "duration", 1)
convert_duration_to_binary(df, "event", "duration", 1)
devtools::load_all(".")
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
convert_duration_to_binary(df, "event", "duration", 1)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.01))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.01))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
df$true == df$converted
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.01))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.01))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
df_true$event == df_converted$duration
df_converted
df_true
df_converted$duration
df_true$event == df_converted$event
all(df_true$event == df_converted$event)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
all(df_true$event == df_converted$event)
all(df_true$duration == df_converted$duration)
test_that("convert duration to binary work", {
sim_data <- simulate_bison_model("binary", aggregated = TRUE)
df <- sim_data$df_sim
df_true <- df
df$event <- abs(rnorm(nrow(df), df$event, 0.1))
df$duration <- abs(rnorm(nrow(df), df$duration, 0.1))
df_converted <- convert_duration_to_binary(df, "event", "duration", 1)
expect_true(all(df_true$event == df_converted$event))
expect_true(all(df_true$duration == df_converted$duration))
})
devtools::document()
devtools::test()
sim_data <- bisonR::simulate_bison_model("binary", aggregated = TRUE)
df_sim <- sim_data$df_sim
levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
df_nodal <- data.frame(node=as.factor(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")))
df_nodal$trait <- rnorm(10)
expect_error(
suppressWarnings(bison_brm(
trait ~ bison(node_eigen(node)),
fit_edge,
df_nodal,
num_draws=5,
silent=2,
refresh=0
)),
regexp=NA
)
df_nodal <- data.frame(node=as.factor(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")))
df_nodal$trait <- rnorm(10)
expect_error(
suppressWarnings(bison_brm(
trait ~ bison(node_eigen(node)),
fit_edge,
df_nodal,
num_draws=5,
silent=2,
refresh=0,
z_score=TRUE
)),
regexp=NA
)
devtools::load_all(".")
df_nodal <- data.frame(node=as.factor(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")))
df_nodal$trait <- rnorm(10)
expect_error(
suppressWarnings(bison_brm(
trait ~ bison(node_eigen(node)),
fit_edge,
df_nodal,
num_draws=5,
silent=2,
refresh=0,
z_score=TRUE
)),
regexp=NA
)
devtools::load_all(".")
df_nodal <- data.frame(node=as.factor(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")))
df_nodal$trait <- rnorm(10)
expect_error(
suppressWarnings(bison_brm(
trait ~ bison(node_eigen(node)),
fit_edge,
df_nodal,
num_draws=5,
silent=2,
refresh=0,
z_score=TRUE
)),
regexp=NA
)
devtools::load_all(".")
df_nodal <- data.frame(node=as.factor(c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")))
df_nodal$trait <- rnorm(10)
expect_error(
suppressWarnings(bison_brm(
trait ~ bison(node_eigen(node)),
fit_edge,
df_nodal,
num_draws=5,
silent=2,
refresh=0,
z_score=TRUE
)),
regexp=NA
)
devtools::check()
devtools::build_vignettes("mixture_models")
devtools::build_vignettes("mixture_models.Rmd")
devtools::build_vignettes("mixture_models")
ls
pkgdown::build_article("mixture_models")
devtools::install()
pkgdown::build_article("mixture_models")
devtools::document()
sim_data <- bisonR::simulate_bison_model("binary", aggregated = TRUE)
df_sim <- sim_data$df_sim
levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
bison_to_igraph(fit_edge, num_draws=10)
nets <- expect_warning(
bison_to_igraph(fit_edge, num_draws=10),
regexp=NA
)
test_that("bison to igraph conversion works", {
sim_data <- bisonR::simulate_bison_model("binary", aggregated = TRUE)
df_sim <- sim_data$df_sim
levels(df_sim$node_1_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
levels(df_sim$node_2_id) <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
fit_edge <- bison_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df_sim,
model_type="binary_conjugate",
priors=get_default_priors("binary_conjugate")
)
nets <- expect_warning(
bison_to_igraph(fit_edge, num_draws=10),
regexp=NA
)
expect_true(length(nets) == 10)
})
devtools::test_active_file()
class(nets[[1]])
devtools::load_all(".")
nets <- expect_warning(
bison_to_igraph(fit_edge, num_draws=10),
regexp=NA
)
expect_true(length(nets) == 10)
class(nets[[1]])
devtools::load_all(".")
devtools::test_active_file()
devtools::install()
remove.packages("igraph")
devtools::install()
bison_to_igraph
pkgdown::build_site()
devtools::document()
pkgdown::deploy_to_branch(new_process=FALSE)
rgamma(1e5, 0.01 + 0, 0.01 + 36)
is.infinite(rgamma(1e5, 0.01 + 0, 0.01 + 36))
any(is.infinite(rgamma(1e5, 0.01 + 0, 0.01 + 36)))
any(is.infinite(rgamma(1e5, 0.001 + 0, 0.001 + 36)))
any(is.infinite(rgamma(1e5, 0.01 + 0, 0.01 + 36)))

summary(fit_mixture)
library(bisonR)
library(dplyr)
devtools::load_all(".")
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
fit_mixture$edge_component_probabilities
fit_mixture$edge_component_probabilities
fit_mixture$edge_component_probabilities[[5]]
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
fit_mixture$edge_component_probabilities[[2]]
df[88, ]
devtools::load_all(".")
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
library(mclust)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::install()
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
devtools::install()
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
cmdstanr::install_cmdstan()
cmdstanr::install_cmdstan(overwrite=TRUE)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::install()
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::install()
library(bisonR)
library(dplyr)
library(bisonR)
library(dplyr)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::build()
devtools::install()
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::install()
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
hist(df$event/df$duration, breaks=20)
priors <- get_default_priors("binary")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
devtools::load_all(".")
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 2)
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_edge_component_probabilities(fit_mixture, 3)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
get_network_component_probabilities(fit_mixture)
devtools::load_all(".")
devtools::document()
draw_network_metric_samples(fit_edge, "weighted_density")
draw_network_metric_samples(fit_edge, "weighted_density")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation", standardise=FALSE)
draw_network_metric_samples(fit_edge, "weighted_density", standardise=FALSE)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density")
draw_network_metric_samples(fit_edge, "weighted_density", standardise = TRUE)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density", standardise = TRUE)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "weighted_density", standardise = TRUE)
draw_network_metric_samples(fit_edge, "weighted_density", standardise = FALSE)
weighted_density_samples <- draw_network_metric_samples(fit_edge, "weighted_density")
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
weighted_density_samples <- draw_network_metric_samples(fit_edge, "weighted_density")
social_differentiation_samples <- draw_network_metric_samples(fit_edge, "social_differentiation")
plot(density(weighted_density_samples))
plot(density(social_differentiation_samples))
devtools::test()
class(matrix(0, 2, 2))
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
priors$edge <- "normal(0, 2.5)"
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=1)
plot_predictions(fit_edge, num_draws=20)
summary(fit_edge)
plot_network(fit_edge, lwd=1)
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")[1]
draw_network_metric_samples(fit_edge, "social_differentiation")[10]
draw_network_metric_samples(fit_edge, "social_differentiation")[10]
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")
draw_network_metric_samples(fit_edge, "social_differentiation")[9]
devtools::load_all(".")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::document()
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
class(draw_network_metric_samples(fit_edge, "social_differentiation"))
class(draw_network_metric_samples(fit_edge, "social_differentiation"))
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::document()
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::install()
library(bisonR)
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
priors$edge <- "normal(0, 2.5)"
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=1)
plot_predictions(fit_edge, num_draws=20)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
draw_network_metric_samples(fit_edge, "social_differentiation")
detach("package:bisonR", unload = TRUE)
devtools::install()
library(bisonR)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
detach("package:bisonR", unload = TRUE)
devtools::install()
library(bisonR)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
detach("package:bisonR", unload = TRUE)
library(bisonR)
print.edge_model
library(bisonR)
print.edge_model
devtools::load_all(".")
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
library(bisonR)
print(draw_network_metric_samples(fit_edge, "social_differentiation"))
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
devtools::load_all(".")
print.network_metric_samples(draw_network_metric_samples(fit_edge, "social_differentiation"))
summary(fit_edge)
print(fit_edge)
summary(fit_edge)
draw_network_metric_samples(fit_edge, "social_differentiation")
library(bisonR)
draw_network_metric_samples(fit_edge, "social_differentiation")
devtools::load_all(".")
draw_network_metric_samples(fit_edge, "social_differentiation")
library(bisonR)
library(dplyr)
sim_data <- simulate_edge_model("binary", aggregated = FALSE)
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary")
priors
priors$edge <- "normal(0, 2.5)"
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors
)
plot_trace(fit_edge, par_ids=1)
plot_trace(fit_edge, par_ids=2)
?edge_model
devtools::load_all(".")
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary",
priors=priors,
iter_sampling = 2000
)
plot_trace(fit_edge, par_ids=2)
plot_trace(fit_edge, par_ids=2)
plot_trace(fit_edge, par_ids=2)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
priors <- get_default_priors("binary_conjugate")
priors
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate",
priors=priors
)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
get_edge_component_probabilities(fit_mixture, 3)
get_network_component_probabilities(fit_mixture)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate"
)
get_network_component_probabilities(fit_mixture)
fit_mixture <- edge_mixture(fit_edge, num_components=5)
summary(fit_mixture)
devtools::test()
summary(fit_dyadic)
summary(fit_edge)
fit_edge
summary(fit_edge)
attr(summary(fit_edge))
summary(fit_edge)$
summary(fit_edge)$edgelist
plot_predictions(fit_edge, num_draws=20)
plot_predictions(fit_edge, num_draws=20)
summary(fit_edge)
plot_network(fit_edge, lwd=1)
priors <- get_default_priors("dyadic_regression")
priors$error <- "half-normal(2.5)"
priors
df_dyadic <- df %>%
distinct(node_1_id, node_2_id, age_diff)
fit_dyadic <- dyadic_regression(dyad(node_1_id, node_2_id) ~ age_diff, fit_edge, df_dyadic, mm=FALSE, priors=priors)
plot_trace(fit_dyadic, par_ids=1)
plot_predictions(fit_dyadic, num_draws=20)
summary(fit_dyadic)
summary(fit_dyadic)$coefficients
summary(fit_dyadic)$coefficients[1, 2]
devtools::test()
devtools::test()
devtools::test()
devtools::test()
# Check that plots don't produce warnings
expect_warning(plot_predictions(fit_dyadic), regexp=NA)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate"
)
fit_mixture <- edge_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate"
)
fit_mixture <- edge_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
1:1
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
fit_mixture$edge_component_probabilities
fit_mixture$edge_component_probabilities[[1]]
fit_mixture$edge_component_probabilities[[2]]
devtools::load_all(".")
fit_mixture$edge_component_probabilities[[2]]
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
matrix(c(1, 2, 3), ncol=1)
matrix(c(1, 2, 3), nrow=1)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
fit_mixture$component_probabilities[[1]]
fit_mixture$component_probabilities[[2]]
fit_mixture$edge_component_probabilities
fit_mixture$edge_component_probabilities[[1]]
fit_mixture$edge_component_probabilities[[2]]
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
do.call(paste, c(get_edgelist(fit_mixture$edge_mixture_obj$edgemodel)[, 1:2], sep=" <-> "))
do.call(paste, c(get_edgelist(fit_mixture$edge_mixture_obj$edgemodel)[, 1:2], sep=" <-> "))
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
devtools::load_all(".")
summary(fit_mixture)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate"
)
fit_mixture <- edge_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate"
)
fit_mixture <- edge_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
sim_data <- simulate_edge_model_mixture("binary", num_components = 2, component_weights = c(0.5, 0.5))
df <- sim_data$df_sim
head(df)
fit_edge <- edge_model(
(event | duration) ~ dyad(node_1_id, node_2_id),
data=df,
data_type="binary_conjugate"
)
fit_mixture <- edge_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes
summary(fit_mixture)
devtools::check()
devtools::test()
devtools::check()
devtools::check()
devtools::document()

// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_count_mixed_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_count_mixed");
    reader.add_event(36, 34, "end", "model_count_mixed");
    return reader;
}
#include <stan_meta_header.hpp>
class model_count_mixed
  : public stan::model::model_base_crtp<model_count_mixed> {
private:
        int N;
        int K_fixed;
        int K_random;
        int R;
        std::vector<int> y;
        vector_d duration000;
        matrix_d X;
        matrix_d Z;
        std::vector<int> G;
public:
    model_count_mixed(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_count_mixed(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_count_mixed_namespace::model_count_mixed";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K_fixed", "int", context__.to_vec());
            K_fixed = int(0);
            vals_i__ = context__.vals_i("K_fixed");
            pos__ = 0;
            K_fixed = vals_i__[pos__++];
            check_greater_or_equal(function__, "K_fixed", K_fixed, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K_random", "int", context__.to_vec());
            K_random = int(0);
            vals_i__ = context__.vals_i("K_random");
            pos__ = 0;
            K_random = vals_i__[pos__++];
            check_greater_or_equal(function__, "K_random", K_random, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            check_greater_or_equal(function__, "R", R, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("duration000", "N", N);
            context__.validate_dims("data initialization", "duration000", "vector_d", context__.to_vec(N));
            duration000 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("duration000");
            pos__ = 0;
            size_t duration000_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < duration000_j_1_max__; ++j_1__) {
                duration000(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K_fixed", K_fixed);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K_fixed));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K_fixed);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K_fixed;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("Z", "N", N);
            validate_non_negative_index("Z", "K_random", K_random);
            context__.validate_dims("data initialization", "Z", "matrix_d", context__.to_vec(N,K_random));
            Z = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K_random);
            vals_r__ = context__.vals_r("Z");
            pos__ = 0;
            size_t Z_j_2_max__ = K_random;
            size_t Z_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    Z(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("G", "K_random", K_random);
            context__.validate_dims("data initialization", "G", "int", context__.to_vec(K_random));
            G = std::vector<int>(K_random, int(0));
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            size_t G_k_0_max__ = K_random;
            for (size_t k_0__ = 0; k_0__ < G_k_0_max__; ++k_0__) {
                G[k_0__] = vals_i__[pos__++];
            }
            size_t G_i_0_max__ = K_random;
            for (size_t i_0__ = 0; i_0__ < G_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "G[i_0__]", G[i_0__], 0);
                check_less_or_equal(function__, "G[i_0__]", G[i_0__], R);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("beta_fixed", "K_fixed", K_fixed);
            num_params_r__ += K_fixed;
            current_statement_begin__ = 15;
            validate_non_negative_index("beta_random", "K_random", K_random);
            num_params_r__ += K_random;
            current_statement_begin__ = 16;
            validate_non_negative_index("H_mu", "R", R);
            num_params_r__ += R;
            current_statement_begin__ = 17;
            validate_non_negative_index("H_sigma", "R", R);
            num_params_r__ += R;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_count_mixed() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 14;
        if (!(context__.contains_r("beta_fixed")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_fixed missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_fixed");
        pos__ = 0U;
        validate_non_negative_index("beta_fixed", "K_fixed", K_fixed);
        context__.validate_dims("parameter initialization", "beta_fixed", "vector_d", context__.to_vec(K_fixed));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_fixed(K_fixed);
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            beta_fixed(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_fixed);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_fixed: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("beta_random")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_random missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_random");
        pos__ = 0U;
        validate_non_negative_index("beta_random", "K_random", K_random);
        context__.validate_dims("parameter initialization", "beta_random", "vector_d", context__.to_vec(K_random));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_random(K_random);
        size_t beta_random_j_1_max__ = K_random;
        for (size_t j_1__ = 0; j_1__ < beta_random_j_1_max__; ++j_1__) {
            beta_random(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_random);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_random: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("H_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable H_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("H_mu");
        pos__ = 0U;
        validate_non_negative_index("H_mu", "R", R);
        context__.validate_dims("parameter initialization", "H_mu", "vector_d", context__.to_vec(R));
        Eigen::Matrix<double, Eigen::Dynamic, 1> H_mu(R);
        size_t H_mu_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_mu_j_1_max__; ++j_1__) {
            H_mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(H_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable H_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("H_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable H_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("H_sigma");
        pos__ = 0U;
        validate_non_negative_index("H_sigma", "R", R);
        context__.validate_dims("parameter initialization", "H_sigma", "vector_d", context__.to_vec(R));
        Eigen::Matrix<double, Eigen::Dynamic, 1> H_sigma(R);
        size_t H_sigma_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_sigma_j_1_max__; ++j_1__) {
            H_sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, H_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable H_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_fixed;
            (void) beta_fixed;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_fixed = in__.vector_constrain(K_fixed, lp__);
            else
                beta_fixed = in__.vector_constrain(K_fixed);
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_random;
            (void) beta_random;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_random = in__.vector_constrain(K_random, lp__);
            else
                beta_random = in__.vector_constrain(K_random);
            current_statement_begin__ = 16;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> H_mu;
            (void) H_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                H_mu = in__.vector_constrain(R, lp__);
            else
                H_mu = in__.vector_constrain(R);
            current_statement_begin__ = 17;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> H_sigma;
            (void) H_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                H_sigma = in__.vector_lb_constrain(0, R, lp__);
            else
                H_sigma = in__.vector_lb_constrain(0, R);
            // model body
            {
            current_statement_begin__ = 21;
            validate_non_negative_index("lprobs", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lprobs(N);
            stan::math::initialize(lprobs, DUMMY_VAR__);
            stan::math::fill(lprobs, DUMMY_VAR__);
            current_statement_begin__ = 22;
            stan::math::assign(lprobs, add(multiply(X, beta_fixed), multiply(Z, beta_random)));
            current_statement_begin__ = 25;
            lp_accum__.add(poisson_log(y, elt_multiply(stan::math::exp(lprobs), duration000)));
            current_statement_begin__ = 28;
            lp_accum__.add(normal_log(beta_fixed, 0, 2.5));
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log(beta_random, stan::model::rvalue(H_mu, stan::model::cons_list(stan::model::index_multi(G), stan::model::nil_index_list()), "H_mu"), stan::model::rvalue(H_sigma, stan::model::cons_list(stan::model::index_multi(G), stan::model::nil_index_list()), "H_sigma")));
            current_statement_begin__ = 32;
            lp_accum__.add(normal_log(H_mu, 0, 2.5));
            current_statement_begin__ = 33;
            lp_accum__.add(exponential_log(H_sigma, 1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_fixed");
        names__.push_back("beta_random");
        names__.push_back("H_mu");
        names__.push_back("H_sigma");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K_fixed);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K_random);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_count_mixed_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_fixed = in__.vector_constrain(K_fixed);
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            vars__.push_back(beta_fixed(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_random = in__.vector_constrain(K_random);
        size_t beta_random_j_1_max__ = K_random;
        for (size_t j_1__ = 0; j_1__ < beta_random_j_1_max__; ++j_1__) {
            vars__.push_back(beta_random(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> H_mu = in__.vector_constrain(R);
        size_t H_mu_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_mu_j_1_max__; ++j_1__) {
            vars__.push_back(H_mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> H_sigma = in__.vector_lb_constrain(0, R);
        size_t H_sigma_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_sigma_j_1_max__; ++j_1__) {
            vars__.push_back(H_sigma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_count_mixed";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_random_j_1_max__ = K_random;
        for (size_t j_1__ = 0; j_1__ < beta_random_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_random" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t H_mu_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "H_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t H_sigma_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "H_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_random_j_1_max__ = K_random;
        for (size_t j_1__ = 0; j_1__ < beta_random_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_random" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t H_mu_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "H_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t H_sigma_j_1_max__ = R;
        for (size_t j_1__ = 0; j_1__ < H_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "H_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_count_mixed_namespace::model_count_mixed stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif

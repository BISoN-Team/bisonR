// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_dyadic_regression_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dyadic_regression");
    reader.add_event(47, 45, "end", "model_dyadic_regression");
    return reader;
}
#include <stan_meta_header.hpp>
class model_dyadic_regression
  : public stan::model::model_base_crtp<model_dyadic_regression> {
private:
        int N;
        int num_nodes;
        int K_fixed;
        vector_d edge_mu;
        matrix_d edge_cov;
        matrix_d X;
        std::vector<int> node_ids_1;
        std::vector<int> node_ids_2;
        int include_multimembership;
public:
    model_dyadic_regression(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dyadic_regression(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dyadic_regression_namespace::model_dyadic_regression";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "num_nodes", "int", context__.to_vec());
            num_nodes = int(0);
            vals_i__ = context__.vals_i("num_nodes");
            pos__ = 0;
            num_nodes = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_nodes", num_nodes, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K_fixed", "int", context__.to_vec());
            K_fixed = int(0);
            vals_i__ = context__.vals_i("K_fixed");
            pos__ = 0;
            K_fixed = vals_i__[pos__++];
            check_greater_or_equal(function__, "K_fixed", K_fixed, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("edge_mu", "N", N);
            context__.validate_dims("data initialization", "edge_mu", "vector_d", context__.to_vec(N));
            edge_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("edge_mu");
            pos__ = 0;
            size_t edge_mu_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < edge_mu_j_1_max__; ++j_1__) {
                edge_mu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("edge_cov", "N", N);
            validate_non_negative_index("edge_cov", "N", N);
            context__.validate_dims("data initialization", "edge_cov", "matrix_d", context__.to_vec(N,N));
            edge_cov = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            vals_r__ = context__.vals_r("edge_cov");
            pos__ = 0;
            size_t edge_cov_j_2_max__ = N;
            size_t edge_cov_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < edge_cov_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < edge_cov_j_1_max__; ++j_1__) {
                    edge_cov(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K_fixed", K_fixed);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K_fixed));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K_fixed);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K_fixed;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("node_ids_1", "N", N);
            context__.validate_dims("data initialization", "node_ids_1", "int", context__.to_vec(N));
            node_ids_1 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("node_ids_1");
            pos__ = 0;
            size_t node_ids_1_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < node_ids_1_k_0_max__; ++k_0__) {
                node_ids_1[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("node_ids_2", "N", N);
            context__.validate_dims("data initialization", "node_ids_2", "int", context__.to_vec(N));
            node_ids_2 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("node_ids_2");
            pos__ = 0;
            size_t node_ids_2_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < node_ids_2_k_0_max__; ++k_0__) {
                node_ids_2[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "include_multimembership", "int", context__.to_vec());
            include_multimembership = int(0);
            vals_i__ = context__.vals_i("include_multimembership");
            pos__ = 0;
            include_multimembership = vals_i__[pos__++];
            check_greater_or_equal(function__, "include_multimembership", include_multimembership, 0);
            check_less_or_equal(function__, "include_multimembership", include_multimembership, 1);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("beta_fixed", "K_fixed", K_fixed);
            num_params_r__ += K_fixed;
            current_statement_begin__ = 15;
            num_params_r__ += 1;
            current_statement_begin__ = 16;
            validate_non_negative_index("mm_nodes", "(include_multimembership ? num_nodes : 0 )", (include_multimembership ? num_nodes : 0 ));
            num_params_r__ += (include_multimembership ? num_nodes : 0 );
            current_statement_begin__ = 17;
            validate_non_negative_index("sigma_mm", "include_multimembership", include_multimembership);
            num_params_r__ += (1 * include_multimembership);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dyadic_regression() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 14;
        if (!(context__.contains_r("beta_fixed")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_fixed missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_fixed");
        pos__ = 0U;
        validate_non_negative_index("beta_fixed", "K_fixed", K_fixed);
        context__.validate_dims("parameter initialization", "beta_fixed", "vector_d", context__.to_vec(K_fixed));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_fixed(K_fixed);
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            beta_fixed(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_fixed);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_fixed: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("mm_nodes")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mm_nodes missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mm_nodes");
        pos__ = 0U;
        validate_non_negative_index("mm_nodes", "(include_multimembership ? num_nodes : 0 )", (include_multimembership ? num_nodes : 0 ));
        context__.validate_dims("parameter initialization", "mm_nodes", "vector_d", context__.to_vec((include_multimembership ? num_nodes : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mm_nodes((include_multimembership ? num_nodes : 0 ));
        size_t mm_nodes_j_1_max__ = (include_multimembership ? num_nodes : 0 );
        for (size_t j_1__ = 0; j_1__ < mm_nodes_j_1_max__; ++j_1__) {
            mm_nodes(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(mm_nodes);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mm_nodes: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("sigma_mm")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mm missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mm");
        pos__ = 0U;
        validate_non_negative_index("sigma_mm", "include_multimembership", include_multimembership);
        context__.validate_dims("parameter initialization", "sigma_mm", "double", context__.to_vec(include_multimembership));
        std::vector<double> sigma_mm(include_multimembership, double(0));
        size_t sigma_mm_k_0_max__ = include_multimembership;
        for (size_t k_0__ = 0; k_0__ < sigma_mm_k_0_max__; ++k_0__) {
            sigma_mm[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_mm_i_0_max__ = include_multimembership;
        for (size_t i_0__ = 0; i_0__ < sigma_mm_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_mm[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mm: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_fixed;
            (void) beta_fixed;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_fixed = in__.vector_constrain(K_fixed, lp__);
            else
                beta_fixed = in__.vector_constrain(K_fixed);
            current_statement_begin__ = 15;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 16;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mm_nodes;
            (void) mm_nodes;  // dummy to suppress unused var warning
            if (jacobian__)
                mm_nodes = in__.vector_constrain((include_multimembership ? num_nodes : 0 ), lp__);
            else
                mm_nodes = in__.vector_constrain((include_multimembership ? num_nodes : 0 ));
            current_statement_begin__ = 17;
            std::vector<local_scalar_t__> sigma_mm;
            size_t sigma_mm_d_0_max__ = include_multimembership;
            sigma_mm.reserve(sigma_mm_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_mm_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_mm.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_mm.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 21;
            validate_non_negative_index("predictor", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> predictor(N);
            stan::math::initialize(predictor, DUMMY_VAR__);
            stan::math::fill(predictor, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 22;
            stan::math::assign(predictor, multiply(X, beta_fixed));
            current_statement_begin__ = 23;
            if (as_bool(logical_eq(include_multimembership, 1))) {
                current_statement_begin__ = 24;
                stan::math::assign(predictor, add(add(predictor, stan::model::rvalue(mm_nodes, stan::model::cons_list(stan::model::index_multi(node_ids_1), stan::model::nil_index_list()), "mm_nodes")), stan::model::rvalue(mm_nodes, stan::model::cons_list(stan::model::index_multi(node_ids_2), stan::model::nil_index_list()), "mm_nodes")));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 21;
            size_t predictor_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < predictor_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(predictor(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: predictor" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable predictor: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 30;
            lp_accum__.add(multi_normal_log<propto__>(edge_mu, predictor, add(edge_cov, diag_matrix(rep_vector(sigma, N)))));
            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(beta_fixed, 0, 1));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 36;
            if (as_bool(logical_eq(include_multimembership, 1))) {
                current_statement_begin__ = 37;
                lp_accum__.add(normal_log<propto__>(mm_nodes, 0, sigma_mm));
                current_statement_begin__ = 38;
                lp_accum__.add(normal_log<propto__>(sigma_mm, 0, 1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_fixed");
        names__.push_back("sigma");
        names__.push_back("mm_nodes");
        names__.push_back("sigma_mm");
        names__.push_back("predictor");
        names__.push_back("edge_pred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K_fixed);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((include_multimembership ? num_nodes : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(include_multimembership);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dyadic_regression_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_fixed = in__.vector_constrain(K_fixed);
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            vars__.push_back(beta_fixed(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> mm_nodes = in__.vector_constrain((include_multimembership ? num_nodes : 0 ));
        size_t mm_nodes_j_1_max__ = (include_multimembership ? num_nodes : 0 );
        for (size_t j_1__ = 0; j_1__ < mm_nodes_j_1_max__; ++j_1__) {
            vars__.push_back(mm_nodes(j_1__));
        }
        std::vector<double> sigma_mm;
        size_t sigma_mm_d_0_max__ = include_multimembership;
        sigma_mm.reserve(sigma_mm_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_mm_d_0_max__; ++d_0__) {
            sigma_mm.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_mm_k_0_max__ = include_multimembership;
        for (size_t k_0__ = 0; k_0__ < sigma_mm_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_mm[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 21;
            validate_non_negative_index("predictor", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> predictor(N);
            stan::math::initialize(predictor, DUMMY_VAR__);
            stan::math::fill(predictor, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 22;
            stan::math::assign(predictor, multiply(X, beta_fixed));
            current_statement_begin__ = 23;
            if (as_bool(logical_eq(include_multimembership, 1))) {
                current_statement_begin__ = 24;
                stan::math::assign(predictor, add(add(predictor, stan::model::rvalue(mm_nodes, stan::model::cons_list(stan::model::index_multi(node_ids_1), stan::model::nil_index_list()), "mm_nodes")), stan::model::rvalue(mm_nodes, stan::model::cons_list(stan::model::index_multi(node_ids_2), stan::model::nil_index_list()), "mm_nodes")));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t predictor_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < predictor_j_1_max__; ++j_1__) {
                    vars__.push_back(predictor(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 43;
            validate_non_negative_index("edge_pred", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> edge_pred(N);
            stan::math::initialize(edge_pred, DUMMY_VAR__);
            stan::math::fill(edge_pred, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 44;
            stan::math::assign(edge_pred, multi_normal_rng(predictor, add(edge_cov, diag_matrix(rep_vector(sigma, N))), base_rng__));
            // validate, write generated quantities
            current_statement_begin__ = 43;
            size_t edge_pred_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < edge_pred_j_1_max__; ++j_1__) {
                vars__.push_back(edge_pred(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_dyadic_regression";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t mm_nodes_j_1_max__ = (include_multimembership ? num_nodes : 0 );
        for (size_t j_1__ = 0; j_1__ < mm_nodes_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mm_nodes" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mm_k_0_max__ = include_multimembership;
        for (size_t k_0__ = 0; k_0__ < sigma_mm_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mm" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t predictor_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < predictor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "predictor" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t edge_pred_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < edge_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "edge_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_fixed_j_1_max__ = K_fixed;
        for (size_t j_1__ = 0; j_1__ < beta_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t mm_nodes_j_1_max__ = (include_multimembership ? num_nodes : 0 );
        for (size_t j_1__ = 0; j_1__ < mm_nodes_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mm_nodes" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mm_k_0_max__ = include_multimembership;
        for (size_t k_0__ = 0; k_0__ < sigma_mm_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mm" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t predictor_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < predictor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "predictor" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t edge_pred_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < edge_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "edge_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_dyadic_regression_namespace::model_dyadic_regression stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
